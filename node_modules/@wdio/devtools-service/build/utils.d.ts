import type { CDPSession } from 'puppeteer-core/lib/esm/puppeteer/common/Connection.js';
import type { Target } from 'puppeteer-core/lib/esm/puppeteer/common/Target.js';
import type { RequestPayload } from './handler/network.js';
import type { GathererDriver } from './types.js';
export declare function setUnsupportedCommand(browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser): void;
/**
 * Create a sum of a specific key from a list of objects
 * @param list list of key/value objects
 * @param key  key of value to be summed up
 */
export declare function sumByKey(list: RequestPayload[], key: keyof RequestPayload): number;
/**
 * check if url is supported for tracing
 * @param  {string}  url to check for
 * @return {Boolean}     true if url was opened by user
 */
export declare function isSupportedUrl(url: string): boolean;
/**
 * Either request the page list directly from the browser or if Selenium
 * or Selenoid is used connect to a target manually
 */
export declare function getLighthouseDriver(session: CDPSession, target: Target): Promise<GathererDriver>;
//# sourceMappingURL=utils.d.ts.map