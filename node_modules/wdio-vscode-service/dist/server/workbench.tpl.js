export default function getWorkbench(opts) {
    return /* html */ `
<!-- Copyright (C) Microsoft Corporation. All rights reserved. -->
<!DOCTYPE html>
<html>
    <head>
        <script>
            performance.mark('code/didStartRenderer')
        </script>
        <meta charset="utf-8" />

        <!-- Mobile tweaks -->
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-title" content="Code" />
        <link rel="apple-touch-icon" href="${opts.baseUrl}/code-192.png" />

        <!-- Disable pinch zooming -->
        <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"
        />

        <!-- Workbench Configuration -->
        <meta id="vscode-workbench-web-configuration" data-settings="${opts.webConfiguration}">

        <!-- Workbench Auth Session -->
        <meta id="vscode-workbench-auth-session" data-settings="${opts.authSession}">

        <!-- Builtin Extensions (running out of sources) -->
        <meta id="vscode-workbench-builtin-extensions" data-settings="${opts.builtinExtensions}">

        <!-- Workbench Icon/Manifest/CSS -->
        <link rel="icon" href="${opts.baseUrl}/favicon.ico" type="image/x-icon" />
        <link rel="manifest" href="${opts.baseUrl}/manifest.json">
        <link
            data-name="vs/workbench/workbench.web.main"
            rel="stylesheet"
            href="${opts.baseUrl}/out/vs/workbench/workbench.web.main.css"
        />
    </head>

    <body aria-label="">
    </body>

    <!-- Startup (do not modify order of script tags!) -->
    <script src="${opts.baseUrl}/out/vs/loader.js"></script>
    <script src="${opts.baseUrl}/out/vs/webPackagePaths.js"></script>
    <script>
        let baseUrl = '${opts.baseUrl}';
        Object.keys(self.webPackagePaths).map(function (key, index) {
            self.webPackagePaths[key] = baseUrl + '/node_modules/' + key + '/' + self.webPackagePaths[key];
        });
        require.config({
            baseUrl: baseUrl + '/out',
            recordStats: true,
            trustedTypesPolicy: window.trustedTypes?.createPolicy('amdLoader', {
                createScriptURL(value) {
                    if (value.startsWith(baseUrl)) {
                        return value;
                    }
                    throw new Error('Invalid script url: ' + value)
                }
            }),
            paths: self.webPackagePaths
        });
    </script>
    <script>
        performance.mark('code/willLoadWorkbenchMain');
    </script>
    <script src="${opts.baseUrl}/out/vs/workbench/workbench.web.main.nls.js"></script>
    <script src="${opts.baseUrl}/out/vs/workbench/workbench.web.main.js"></script>
    <script src="${opts.baseUrl}/out/vs/code/browser/workbench/workbench.js"></script>
</html>`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2JlbmNoLnRwbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvd29ya2JlbmNoLnRwbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsT0FBTyxVQUFVLFlBQVksQ0FBRSxJQUFxQjtJQUN2RCxPQUFPLFVBQVUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7NkNBY3dCLElBQUksQ0FBQyxPQUFPOzs7Ozs7Ozs7dUVBU2MsSUFBSSxDQUFDLGdCQUFnQjs7O2tFQUcxQixJQUFJLENBQUMsV0FBVzs7O3dFQUdWLElBQUksQ0FBQyxpQkFBaUI7OztpQ0FHN0QsSUFBSSxDQUFDLE9BQU87cUNBQ1IsSUFBSSxDQUFDLE9BQU87Ozs7b0JBSTdCLElBQUksQ0FBQyxPQUFPOzs7Ozs7OzttQkFRYixJQUFJLENBQUMsT0FBTzttQkFDWixJQUFJLENBQUMsT0FBTzs7eUJBRU4sSUFBSSxDQUFDLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFxQmxCLElBQUksQ0FBQyxPQUFPO21CQUNaLElBQUksQ0FBQyxPQUFPO21CQUNaLElBQUksQ0FBQyxPQUFPO1FBQ3ZCLENBQUE7QUFDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBUZW1wbGF0ZU9wdGlvbnMgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V29ya2JlbmNoIChvcHRzOiBUZW1wbGF0ZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gLyogaHRtbCAqL2BcbjwhLS0gQ29weXJpZ2h0IChDKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuIC0tPlxuPCFET0NUWVBFIGh0bWw+XG48aHRtbD5cbiAgICA8aGVhZD5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ2NvZGUvZGlkU3RhcnRSZW5kZXJlcicpXG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPlxuXG4gICAgICAgIDwhLS0gTW9iaWxlIHR3ZWFrcyAtLT5cbiAgICAgICAgPG1ldGEgbmFtZT1cIm1vYmlsZS13ZWItYXBwLWNhcGFibGVcIiBjb250ZW50PVwieWVzXCIgLz5cbiAgICAgICAgPG1ldGEgbmFtZT1cImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGVcIiBjb250ZW50PVwieWVzXCIgLz5cbiAgICAgICAgPG1ldGEgbmFtZT1cImFwcGxlLW1vYmlsZS13ZWItYXBwLXRpdGxlXCIgY29udGVudD1cIkNvZGVcIiAvPlxuICAgICAgICA8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgaHJlZj1cIiR7b3B0cy5iYXNlVXJsfS9jb2RlLTE5Mi5wbmdcIiAvPlxuXG4gICAgICAgIDwhLS0gRGlzYWJsZSBwaW5jaCB6b29taW5nIC0tPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgICAgbmFtZT1cInZpZXdwb3J0XCJcbiAgICAgICAgICAgIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgbWluaW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm9cIlxuICAgICAgICAvPlxuXG4gICAgICAgIDwhLS0gV29ya2JlbmNoIENvbmZpZ3VyYXRpb24gLS0+XG4gICAgICAgIDxtZXRhIGlkPVwidnNjb2RlLXdvcmtiZW5jaC13ZWItY29uZmlndXJhdGlvblwiIGRhdGEtc2V0dGluZ3M9XCIke29wdHMud2ViQ29uZmlndXJhdGlvbn1cIj5cblxuICAgICAgICA8IS0tIFdvcmtiZW5jaCBBdXRoIFNlc3Npb24gLS0+XG4gICAgICAgIDxtZXRhIGlkPVwidnNjb2RlLXdvcmtiZW5jaC1hdXRoLXNlc3Npb25cIiBkYXRhLXNldHRpbmdzPVwiJHtvcHRzLmF1dGhTZXNzaW9ufVwiPlxuXG4gICAgICAgIDwhLS0gQnVpbHRpbiBFeHRlbnNpb25zIChydW5uaW5nIG91dCBvZiBzb3VyY2VzKSAtLT5cbiAgICAgICAgPG1ldGEgaWQ9XCJ2c2NvZGUtd29ya2JlbmNoLWJ1aWx0aW4tZXh0ZW5zaW9uc1wiIGRhdGEtc2V0dGluZ3M9XCIke29wdHMuYnVpbHRpbkV4dGVuc2lvbnN9XCI+XG5cbiAgICAgICAgPCEtLSBXb3JrYmVuY2ggSWNvbi9NYW5pZmVzdC9DU1MgLS0+XG4gICAgICAgIDxsaW5rIHJlbD1cImljb25cIiBocmVmPVwiJHtvcHRzLmJhc2VVcmx9L2Zhdmljb24uaWNvXCIgdHlwZT1cImltYWdlL3gtaWNvblwiIC8+XG4gICAgICAgIDxsaW5rIHJlbD1cIm1hbmlmZXN0XCIgaHJlZj1cIiR7b3B0cy5iYXNlVXJsfS9tYW5pZmVzdC5qc29uXCI+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgICBkYXRhLW5hbWU9XCJ2cy93b3JrYmVuY2gvd29ya2JlbmNoLndlYi5tYWluXCJcbiAgICAgICAgICAgIHJlbD1cInN0eWxlc2hlZXRcIlxuICAgICAgICAgICAgaHJlZj1cIiR7b3B0cy5iYXNlVXJsfS9vdXQvdnMvd29ya2JlbmNoL3dvcmtiZW5jaC53ZWIubWFpbi5jc3NcIlxuICAgICAgICAvPlxuICAgIDwvaGVhZD5cblxuICAgIDxib2R5IGFyaWEtbGFiZWw9XCJcIj5cbiAgICA8L2JvZHk+XG5cbiAgICA8IS0tIFN0YXJ0dXAgKGRvIG5vdCBtb2RpZnkgb3JkZXIgb2Ygc2NyaXB0IHRhZ3MhKSAtLT5cbiAgICA8c2NyaXB0IHNyYz1cIiR7b3B0cy5iYXNlVXJsfS9vdXQvdnMvbG9hZGVyLmpzXCI+PC9zY3JpcHQ+XG4gICAgPHNjcmlwdCBzcmM9XCIke29wdHMuYmFzZVVybH0vb3V0L3ZzL3dlYlBhY2thZ2VQYXRocy5qc1wiPjwvc2NyaXB0PlxuICAgIDxzY3JpcHQ+XG4gICAgICAgIGxldCBiYXNlVXJsID0gJyR7b3B0cy5iYXNlVXJsfSc7XG4gICAgICAgIE9iamVjdC5rZXlzKHNlbGYud2ViUGFja2FnZVBhdGhzKS5tYXAoZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHNlbGYud2ViUGFja2FnZVBhdGhzW2tleV0gPSBiYXNlVXJsICsgJy9ub2RlX21vZHVsZXMvJyArIGtleSArICcvJyArIHNlbGYud2ViUGFja2FnZVBhdGhzW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1aXJlLmNvbmZpZyh7XG4gICAgICAgICAgICBiYXNlVXJsOiBiYXNlVXJsICsgJy9vdXQnLFxuICAgICAgICAgICAgcmVjb3JkU3RhdHM6IHRydWUsXG4gICAgICAgICAgICB0cnVzdGVkVHlwZXNQb2xpY3k6IHdpbmRvdy50cnVzdGVkVHlwZXM/LmNyZWF0ZVBvbGljeSgnYW1kTG9hZGVyJywge1xuICAgICAgICAgICAgICAgIGNyZWF0ZVNjcmlwdFVSTCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aChiYXNlVXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY3JpcHQgdXJsOiAnICsgdmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoczogc2VsZi53ZWJQYWNrYWdlUGF0aHNcbiAgICAgICAgfSk7XG4gICAgPC9zY3JpcHQ+XG4gICAgPHNjcmlwdD5cbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnY29kZS93aWxsTG9hZFdvcmtiZW5jaE1haW4nKTtcbiAgICA8L3NjcmlwdD5cbiAgICA8c2NyaXB0IHNyYz1cIiR7b3B0cy5iYXNlVXJsfS9vdXQvdnMvd29ya2JlbmNoL3dvcmtiZW5jaC53ZWIubWFpbi5ubHMuanNcIj48L3NjcmlwdD5cbiAgICA8c2NyaXB0IHNyYz1cIiR7b3B0cy5iYXNlVXJsfS9vdXQvdnMvd29ya2JlbmNoL3dvcmtiZW5jaC53ZWIubWFpbi5qc1wiPjwvc2NyaXB0PlxuICAgIDxzY3JpcHQgc3JjPVwiJHtvcHRzLmJhc2VVcmx9L291dC92cy9jb2RlL2Jyb3dzZXIvd29ya2JlbmNoL3dvcmtiZW5jaC5qc1wiPjwvc2NyaXB0PlxuPC9odG1sPmBcbn1cbiJdfQ==