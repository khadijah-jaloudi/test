import fs from 'node:fs/promises';
import url from 'node:url';
import path from 'node:path';
import logger from '@wdio/logger';
import getPort from 'get-port';
import fastify from 'fastify';
import fastifyCors from '@fastify/cors';
import fastifyStatic from '@fastify/static';
import { request } from 'undici';
import getWorkbench from './workbench.tpl.js';
import { getWorkbenchOptions } from './utils.js';
import { getFileType } from '../utils.js';
import { fsProviderExtensionPrefix } from './constants.js';
import { DEFAULT_VSCODE_WEB_PORT, DEFAULT_CHANNEL, DEFAULT_VSCODE_WEB_HOSTNAME } from '../constants.js';
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
const log = logger('wdio-vscode-service/server');
const mountPrefix = '/static/mount';
const webviewHostRegexp = /^https:\/\/[^.]+\.vscode-webview\.net$/;
/**
 * ToDo(Christian): missing capabilities:
 *   - allow serve VSCode sources from path location or CDN
 *   - allow to include additional extensions (#20)
 */
export default async function startServer(standalone, options) {
    const app = fastify({ logger: true });
    const port = await getPort({ port: options.serverOptions?.port || DEFAULT_VSCODE_WEB_PORT });
    await app.register(fastifyCors, {
        methods: ['GET'],
        credentials: true,
        origin: (origin, cb) => cb(null, webviewHostRegexp.test(origin || ''))
    });
    app.addHook('preHandler', async (req, reply) => {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        reply.header('Access-Control-Allow-Origin', '*');
        const value = req.query['vscode-coi'];
        if (value === '1') {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            reply.header('Cross-Origin-Opener-Policy', 'same-origin');
        }
        else if (value === '2') {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            reply.header('Cross-Origin-Embedder-Policy', 'require-corp');
        }
        else if (value === '3' || value === '') {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            reply.header('Cross-Origin-Opener-Policy', 'same-origin');
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            reply.header('Cross-Origin-Embedder-Policy', 'require-corp');
        }
    });
    if (options.extensionPath) {
        log.info(`Serving dev extensions from ${options.extensionPath}`);
        await app.register(fastifyStatic, {
            prefix: '/static/devextensions',
            root: options.extensionPath
        });
    }
    await app.register(fastifyStatic, {
        prefix: '/static/build',
        root: standalone.path,
        decorateReply: false // the reply decorator has been added by the first plugin registration
    });
    if (options.workspacePath) {
        log.info(`Serve workspace from ${options.workspacePath}`);
        app.addHook('preHandler', async (req, reply) => {
            const filePath = req.params['*'];
            const queries = Object.keys(req.query);
            if (!options.workspacePath || !filePath || !req.url.startsWith(mountPrefix)) {
                return null;
            }
            const p = path.join(options.workspacePath, filePath === mountPrefix.slice(1)
                ? filePath.slice(mountPrefix.length - 1)
                : filePath);
            if (queries.includes('stat')) {
                try {
                    const stats = await fs.stat(p);
                    // eslint-disable-next-line @typescript-eslint/return-await
                    return reply.send(JSON.stringify({
                        type: getFileType(stats),
                        ctime: stats.ctime.getTime(),
                        mtime: stats.mtime.getTime(),
                        size: stats.size
                    }));
                }
                catch (e) {
                    log.warn(e.stack);
                    return reply.send(JSON.stringify({
                        error: e.code
                    }));
                }
            }
            if (queries.includes('readdir')) {
                try {
                    const entries = await fs.readdir(p, { withFileTypes: true });
                    // eslint-disable-next-line @typescript-eslint/return-await
                    return reply.send(JSON.stringify(entries.map((d) => ({ name: d.name, type: getFileType(d) }))));
                }
                catch (e) {
                    log.warn(e.stack);
                    return reply.send(JSON.stringify({
                        error: e.code
                    }));
                }
            }
            return null;
        });
        await app.register(fastifyStatic, {
            prefix: `${mountPrefix}/`,
            root: options.workspacePath,
            dotfiles: 'allow',
            decorateReply: false // the reply decorator has been added by the first plugin registration
        });
        await app.register(fastifyStatic, {
            prefix: fsProviderExtensionPrefix,
            root: path.join(__dirname, '..', '..', 'src', 'server', 'fs-provider'),
            decorateReply: false // the reply decorator has been added by the first plugin registration
        });
    }
    /**
     * mount additional extensions here, e.g.:
     * ```
     * if (config.extensionPaths) {
     *   config.extensionPaths.forEach((extensionPath, index) => {
     *     console.log('Serving additional built-in extensions from ' + extensionPath);
     *     app.use(kmount(`/static/extensions/${index}`, kstatic(extensionPath, serveOptions)));
     *   });
     * }
     * ```
     * when working on https://github.com/webdriverio-community/wdio-vscode-service/issues/20
     */
    /**
     * Workbench
     */
    app.get('/callback', async (req, reply) => {
        const host = `${req.protocol}://${req.hostname || DEFAULT_VSCODE_WEB_HOSTNAME}:${port}`;
        const cbUrl = `${host}/${req.url}/out/vs/code/browser/workbench/callback.html`;
        const { body } = await request(cbUrl, {});
        await reply.send(body);
    });
    app.get('/', async (req, reply) => {
        const hostname = req.hostname || DEFAULT_VSCODE_WEB_HOSTNAME;
        const host = `${req.protocol}://${hostname}`;
        const webConfiguration = await getWorkbenchOptions({ protocol: req.protocol, host: hostname }, {
            /**
             * modify when support additional extension
             */
            extensionPaths: [],
            extensionIds: [],
            extensionDevelopmentPath: options.extensionPath,
            build: {
                type: 'static',
                location: standalone.path,
                quality: (options.version || DEFAULT_CHANNEL),
                version: standalone.version
            },
            extensionTestsPath: undefined,
            folderUri: undefined,
            folderMountPath: options.workspacePath,
            printServerLog: true
        });
        const template = getWorkbench({
            baseUrl: `${host}/static/build`,
            webConfiguration: JSON.stringify(webConfiguration).replace(/"/g, '&quot;'),
            authSession: '',
            builtinExtensions: '[]'
        });
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        reply.header('Content-Type', 'text/html');
        return reply.send(template);
    });
    await app.listen(port);
    log.info(`VSCode server started on port ${port}`);
    return port;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2pDLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQTtBQUMxQixPQUFPLElBQUksTUFBTSxXQUFXLENBQUE7QUFFNUIsT0FBTyxNQUFNLE1BQU0sY0FBYyxDQUFBO0FBQ2pDLE9BQU8sT0FBTyxNQUFNLFVBQVUsQ0FBQTtBQUM5QixPQUFPLE9BQTJCLE1BQU0sU0FBUyxDQUFBO0FBQ2pELE9BQU8sV0FBVyxNQUFNLGVBQWUsQ0FBQTtBQUN2QyxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRWhDLE9BQU8sWUFBWSxNQUFNLG9CQUFvQixDQUFBO0FBQzdDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3pDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQzFELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxlQUFlLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUd2RyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUE7QUFFaEQsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFBO0FBQ25DLE1BQU0saUJBQWlCLEdBQUcsd0NBQXdDLENBQUE7QUFRbEU7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxVQUFV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UyxFQUFFLFNBQVM7WUFDcEIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxhQUFhO1lBQ3RDLGNBQWMsRUFBRSxJQUFJO1NBQ3ZCLENBQ0osQ0FBQTtRQUVELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQztZQUMxQixPQUFPLEVBQUUsR0FBRyxJQUFJLGVBQWU7WUFDL0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1lBQzFFLFdBQVcsRUFBRSxFQUFFO1lBQ2YsaUJBQWlCLEVBQUUsSUFBSTtTQUMxQixDQUFDLENBQUE7UUFFRixtRUFBbUU7UUFDbkUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDekMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9CLENBQUMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUNBQWlDLElBQUksRUFBRSxDQUFDLENBQUE7SUFDakQsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnXG5pbXBvcnQgdXJsIGZyb20gJ25vZGU6dXJsJ1xuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJ1xuXG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcbmltcG9ydCBnZXRQb3J0IGZyb20gJ2dldC1wb3J0J1xuaW1wb3J0IGZhc3RpZnksIHsgRmFzdGlmeVJlcXVlc3QgfSBmcm9tICdmYXN0aWZ5J1xuaW1wb3J0IGZhc3RpZnlDb3JzIGZyb20gJ0BmYXN0aWZ5L2NvcnMnXG5pbXBvcnQgZmFzdGlmeVN0YXRpYyBmcm9tICdAZmFzdGlmeS9zdGF0aWMnXG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAndW5kaWNpJ1xuXG5pbXBvcnQgZ2V0V29ya2JlbmNoIGZyb20gJy4vd29ya2JlbmNoLnRwbC5qcydcbmltcG9ydCB7IGdldFdvcmtiZW5jaE9wdGlvbnMgfSBmcm9tICcuL3V0aWxzLmpzJ1xuaW1wb3J0IHsgZ2V0RmlsZVR5cGUgfSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IGZzUHJvdmlkZXJFeHRlbnNpb25QcmVmaXggfSBmcm9tICcuL2NvbnN0YW50cy5qcydcbmltcG9ydCB7IERFRkFVTFRfVlNDT0RFX1dFQl9QT1JULCBERUZBVUxUX0NIQU5ORUwsIERFRkFVTFRfVlNDT0RFX1dFQl9IT1NUTkFNRSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcydcbmltcG9ydCB0eXBlIHsgVlNDb2RlT3B0aW9ucywgQnVuZGxlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmNvbnN0IF9fZGlybmFtZSA9IHVybC5maWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4nLCBpbXBvcnQubWV0YS51cmwpKVxuY29uc3QgbG9nID0gbG9nZ2VyKCd3ZGlvLXZzY29kZS1zZXJ2aWNlL3NlcnZlcicpXG5cbmNvbnN0IG1vdW50UHJlZml4ID0gJy9zdGF0aWMvbW91bnQnXG5jb25zdCB3ZWJ2aWV3SG9zdFJlZ2V4cCA9IC9eaHR0cHM6XFwvXFwvW14uXStcXC52c2NvZGUtd2Vidmlld1xcLm5ldCQvXG5cbnR5cGUgQ09JUmVxdWVzdCA9IEZhc3RpZnlSZXF1ZXN0PHtcbiAgICBRdWVyeXN0cmluZzoge1xuICAgICAgICAndnNjb2RlLWNvaSc6ICcxJyB8ICcyJyB8ICczJ1xuICAgIH1cbn0+XG5cbi8qKlxuICogVG9EbyhDaHJpc3RpYW4pOiBtaXNzaW5nIGNhcGFiaWxpdGllczpcbiAqICAgLSBhbGxvdyBzZXJ2ZSBWU0NvZGUgc291cmNlcyBmcm9tIHBhdGggbG9jYXRpb24gb3IgQ0ROXG4gKiAgIC0gYWxsb3cgdG8gaW5jbHVkZSBhZGRpdGlvbmFsIGV4dGVuc2lvbnMgKCMyMClcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIgKHN0YW5kYWxvbmU6IEJ1bmRsZSwgb3B0aW9uczogVlNDb2RlT3B0aW9ucykge1xuICAgIGNvbnN0IGFwcCA9IGZhc3RpZnkoeyBsb2dnZXI6IHRydWUgfSlcbiAgICBjb25zdCBwb3J0ID0gYXdhaXQgZ2V0UG9ydCh7IHBvcnQ6IG9wdGlvbnMuc2VydmVyT3B0aW9ucz8ucG9ydCB8fCBERUZBVUxUX1ZTQ09ERV9XRUJfUE9SVCB9KVxuICAgIGF3YWl0IGFwcC5yZWdpc3RlcihmYXN0aWZ5Q29ycywge1xuICAgICAgICBtZXRob2RzOiBbJ0dFVCddLFxuICAgICAgICBjcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgb3JpZ2luOiAob3JpZ2luLCBjYikgPT4gY2IobnVsbCwgd2Vidmlld0hvc3RSZWdleHAudGVzdChvcmlnaW4gfHwgJycpKVxuICAgIH0pXG5cbiAgICBhcHAuYWRkSG9vaygncHJlSGFuZGxlcicsIGFzeW5jIChyZXE6IENPSVJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgcmVwbHkuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpXG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXEucXVlcnlbJ3ZzY29kZS1jb2knXVxuICAgICAgICBpZiAodmFsdWUgPT09ICcxJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgcmVwbHkuaGVhZGVyKCdDcm9zcy1PcmlnaW4tT3BlbmVyLVBvbGljeScsICdzYW1lLW9yaWdpbicpXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcyJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgcmVwbHkuaGVhZGVyKCdDcm9zcy1PcmlnaW4tRW1iZWRkZXItUG9saWN5JywgJ3JlcXVpcmUtY29ycCcpXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICczJyB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgIHJlcGx5LmhlYWRlcignQ3Jvc3MtT3JpZ2luLU9wZW5lci1Qb2xpY3knLCAnc2FtZS1vcmlnaW4nKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgcmVwbHkuaGVhZGVyKCdDcm9zcy1PcmlnaW4tRW1iZWRkZXItUG9saWN5JywgJ3JlcXVpcmUtY29ycCcpXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKG9wdGlvbnMuZXh0ZW5zaW9uUGF0aCkge1xuICAgICAgICBsb2cuaW5mbyhgU2VydmluZyBkZXYgZXh0ZW5zaW9ucyBmcm9tICR7b3B0aW9ucy5leHRlbnNpb25QYXRofWApXG4gICAgICAgIGF3YWl0IGFwcC5yZWdpc3RlcihmYXN0aWZ5U3RhdGljLCB7XG4gICAgICAgICAgICBwcmVmaXg6ICcvc3RhdGljL2RldmV4dGVuc2lvbnMnLFxuICAgICAgICAgICAgcm9vdDogb3B0aW9ucy5leHRlbnNpb25QYXRoXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXdhaXQgYXBwLnJlZ2lzdGVyKGZhc3RpZnlTdGF0aWMsIHtcbiAgICAgICAgcHJlZml4OiAnL3N0YXRpYy9idWlsZCcsXG4gICAgICAgIHJvb3Q6IHN0YW5kYWxvbmUucGF0aCxcbiAgICAgICAgZGVjb3JhdGVSZXBseTogZmFsc2UgLy8gdGhlIHJlcGx5IGRlY29yYXRvciBoYXMgYmVlbiBhZGRlZCBieSB0aGUgZmlyc3QgcGx1Z2luIHJlZ2lzdHJhdGlvblxuICAgIH0pXG5cbiAgICBpZiAob3B0aW9ucy53b3Jrc3BhY2VQYXRoKSB7XG4gICAgICAgIGxvZy5pbmZvKGBTZXJ2ZSB3b3Jrc3BhY2UgZnJvbSAke29wdGlvbnMud29ya3NwYWNlUGF0aH1gKVxuICAgICAgICBhcHAuYWRkSG9vaygncHJlSGFuZGxlcicsIGFzeW5jIChyZXEsIHJlcGx5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IChyZXEucGFyYW1zIGFzIHsgJyonOiBzdHJpbmcgfSlbJyonXVxuICAgICAgICAgICAgY29uc3QgcXVlcmllcyA9IE9iamVjdC5rZXlzKHJlcS5xdWVyeSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KVxuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMud29ya3NwYWNlUGF0aCB8fCAhZmlsZVBhdGggfHwgIXJlcS51cmwuc3RhcnRzV2l0aChtb3VudFByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwID0gcGF0aC5qb2luKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMud29ya3NwYWNlUGF0aCxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCA9PT0gbW91bnRQcmVmaXguc2xpY2UoMSlcbiAgICAgICAgICAgICAgICAgICAgPyBmaWxlUGF0aC5zbGljZShtb3VudFByZWZpeC5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgICAgICA6IGZpbGVQYXRoXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAocXVlcmllcy5pbmNsdWRlcygnc3RhdCcpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmcy5zdGF0KHApXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmV0dXJuLWF3YWl0XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBseS5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldEZpbGVUeXBlKHN0YXRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0aW1lOiBzdGF0cy5jdGltZS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtdGltZTogc3RhdHMubXRpbWUuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogc3RhdHMuc2l6ZVxuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oZS5zdGFjaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGx5LnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IChlIGFzIE5vZGVKUy5FcnJub0V4Y2VwdGlvbikuY29kZVxuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChxdWVyaWVzLmluY2x1ZGVzKCdyZWFkZGlyJykpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgZnMucmVhZGRpcihwLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSlcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXR1cm4tYXdhaXRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGx5LnNlbmQoSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLm1hcCgoZCkgPT4gKHsgbmFtZTogZC5uYW1lLCB0eXBlOiBnZXRGaWxlVHlwZShkKSB9KSlcbiAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oZS5zdGFjaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGx5LnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IChlIGFzIE5vZGVKUy5FcnJub0V4Y2VwdGlvbikuY29kZVxuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgYXBwLnJlZ2lzdGVyKGZhc3RpZnlTdGF0aWMsIHtcbiAgICAgICAgICAgIHByZWZpeDogYCR7bW91bnRQcmVmaXh9L2AsXG4gICAgICAgICAgICByb290OiBvcHRpb25zLndvcmtzcGFjZVBhdGgsXG4gICAgICAgICAgICBkb3RmaWxlczogJ2FsbG93JyxcbiAgICAgICAgICAgIGRlY29yYXRlUmVwbHk6IGZhbHNlIC8vIHRoZSByZXBseSBkZWNvcmF0b3IgaGFzIGJlZW4gYWRkZWQgYnkgdGhlIGZpcnN0IHBsdWdpbiByZWdpc3RyYXRpb25cbiAgICAgICAgfSlcbiAgICAgICAgYXdhaXQgYXBwLnJlZ2lzdGVyKGZhc3RpZnlTdGF0aWMsIHtcbiAgICAgICAgICAgIHByZWZpeDogZnNQcm92aWRlckV4dGVuc2lvblByZWZpeCxcbiAgICAgICAgICAgIHJvb3Q6IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICcuLicsICdzcmMnLCAnc2VydmVyJywgJ2ZzLXByb3ZpZGVyJyksXG4gICAgICAgICAgICBkZWNvcmF0ZVJlcGx5OiBmYWxzZSAvLyB0aGUgcmVwbHkgZGVjb3JhdG9yIGhhcyBiZWVuIGFkZGVkIGJ5IHRoZSBmaXJzdCBwbHVnaW4gcmVnaXN0cmF0aW9uXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbW91bnQgYWRkaXRpb25hbCBleHRlbnNpb25zIGhlcmUsIGUuZy46XG4gICAgICogYGBgXG4gICAgICogaWYgKGNvbmZpZy5leHRlbnNpb25QYXRocykge1xuICAgICAqICAgY29uZmlnLmV4dGVuc2lvblBhdGhzLmZvckVhY2goKGV4dGVuc2lvblBhdGgsIGluZGV4KSA9PiB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdTZXJ2aW5nIGFkZGl0aW9uYWwgYnVpbHQtaW4gZXh0ZW5zaW9ucyBmcm9tICcgKyBleHRlbnNpb25QYXRoKTtcbiAgICAgKiAgICAgYXBwLnVzZShrbW91bnQoYC9zdGF0aWMvZXh0ZW5zaW9ucy8ke2luZGV4fWAsIGtzdGF0aWMoZXh0ZW5zaW9uUGF0aCwgc2VydmVPcHRpb25zKSkpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIHdoZW4gd29ya2luZyBvbiBodHRwczovL2dpdGh1Yi5jb20vd2ViZHJpdmVyaW8tY29tbXVuaXR5L3dkaW8tdnNjb2RlLXNlcnZpY2UvaXNzdWVzLzIwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBXb3JrYmVuY2hcbiAgICAgKi9cbiAgICBhcHAuZ2V0KCcvY2FsbGJhY2snLCBhc3luYyAocmVxLCByZXBseSkgPT4ge1xuICAgICAgICBjb25zdCBob3N0ID0gYCR7cmVxLnByb3RvY29sfTovLyR7cmVxLmhvc3RuYW1lIHx8IERFRkFVTFRfVlNDT0RFX1dFQl9IT1NUTkFNRX06JHtwb3J0fWBcbiAgICAgICAgY29uc3QgY2JVcmwgPSBgJHtob3N0fS8ke3JlcS51cmx9L291dC92cy9jb2RlL2Jyb3dzZXIvd29ya2JlbmNoL2NhbGxiYWNrLmh0bWxgXG4gICAgICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdChjYlVybCwge30pXG4gICAgICAgIGF3YWl0IHJlcGx5LnNlbmQoYm9keSlcbiAgICB9KVxuXG4gICAgYXBwLmdldCgnLycsIGFzeW5jIChyZXEsIHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnN0IGhvc3RuYW1lID0gcmVxLmhvc3RuYW1lIHx8IERFRkFVTFRfVlNDT0RFX1dFQl9IT1NUTkFNRVxuICAgICAgICBjb25zdCBob3N0ID0gYCR7cmVxLnByb3RvY29sfTovLyR7aG9zdG5hbWV9YFxuICAgICAgICBjb25zdCB3ZWJDb25maWd1cmF0aW9uID0gYXdhaXQgZ2V0V29ya2JlbmNoT3B0aW9ucyhcbiAgICAgICAgICAgIHsgcHJvdG9jb2w6IHJlcS5wcm90b2NvbCwgaG9zdDogaG9zdG5hbWUgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBtb2RpZnkgd2hlbiBzdXBwb3J0IGFkZGl0aW9uYWwgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uUGF0aHM6IFtdLFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbklkczogW10sIC8vIEdhbGxlcnlFeHRlbnNpb25JbmZvW10gfCB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBleHRlbnNpb25EZXZlbG9wbWVudFBhdGg6IG9wdGlvbnMuZXh0ZW5zaW9uUGF0aCxcbiAgICAgICAgICAgICAgICBidWlsZDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RhdGljJyBhcyBjb25zdCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHN0YW5kYWxvbmUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogKG9wdGlvbnMudmVyc2lvbiB8fCBERUZBVUxUX0NIQU5ORUwpIGFzICdzdGFibGUnIHwgJ2luc2lkZXInLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBzdGFuZGFsb25lLnZlcnNpb25cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvblRlc3RzUGF0aDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZvbGRlclVyaTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZvbGRlck1vdW50UGF0aDogb3B0aW9ucy53b3Jrc3BhY2VQYXRoLFxuICAgICAgICAgICAgICAgIHByaW50U2VydmVyTG9nOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGdldFdvcmtiZW5jaCh7XG4gICAgICAgICAgICBiYXNlVXJsOiBgJHtob3N0fS9zdGF0aWMvYnVpbGRgLFxuICAgICAgICAgICAgd2ViQ29uZmlndXJhdGlvbjogSlNPTi5zdHJpbmdpZnkod2ViQ29uZmlndXJhdGlvbikucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLFxuICAgICAgICAgICAgYXV0aFNlc3Npb246ICcnLFxuICAgICAgICAgICAgYnVpbHRpbkV4dGVuc2lvbnM6ICdbXSdcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICAgIHJlcGx5LmhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvaHRtbCcpXG4gICAgICAgIHJldHVybiByZXBseS5zZW5kKHRlbXBsYXRlKVxuICAgIH0pXG5cbiAgICBhd2FpdCBhcHAubGlzdGVuKHBvcnQpXG4gICAgbG9nLmluZm8oYFZTQ29kZSBzZXJ2ZXIgc3RhcnRlZCBvbiBwb3J0ICR7cG9ydH1gKVxuICAgIHJldHVybiBwb3J0XG59XG4iXX0=