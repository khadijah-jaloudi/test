export interface IConfig {
    readonly extensionPaths: string[] | undefined;
    readonly extensionIds: GalleryExtensionInfo[] | undefined;
    readonly extensionDevelopmentPath: string | undefined;
    readonly extensionTestsPath: string | undefined;
    readonly build: Sources | Static | CDN;
    readonly folderUri: string | undefined;
    readonly folderMountPath: string | undefined;
    readonly printServerLog: boolean;
}
export interface GalleryExtensionInfo {
    readonly id: string;
    readonly preRelease?: boolean;
}
export interface Sources {
    readonly type: 'sources';
    readonly location: string;
}
export interface Static {
    readonly type: 'static';
    readonly location: string;
    readonly quality: 'stable' | 'insider';
    readonly version: string;
}
export interface CDN {
    readonly type: 'cdn';
    readonly uri: string;
}
interface IDevelopmentOptions {
    extensionTestsPath?: URIComponents;
    extensions?: URIComponents[];
}
interface URIComponents {
    scheme: string;
    authority: string;
    path: string;
}
interface IWorkbenchOptions {
    additionalBuiltinExtensions?: (string | URIComponents | GalleryExtensionInfo)[];
    developmentOptions?: IDevelopmentOptions;
    productConfiguration?: {
        [key: string]: any;
    };
    folderUri?: URIComponents;
    workspaceUri?: URIComponents;
}
export declare function getWorkbenchOptions(ctx: {
    protocol: string;
    host: string;
}, config: IConfig): Promise<IWorkbenchOptions>;
export declare function scanForExtensions(rootPath: string, serverURI: URIComponents): Promise<URIComponents[]>;
export {};
//# sourceMappingURL=utils.d.ts.map