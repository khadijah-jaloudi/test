#!/usr/bin/env node
"use strict";
/* eslint-disable node/shebang, @typescript-eslint/no-var-requires */
/**
 * we require here because `pkg` doesn't support ESM yet
 * see https://github.com/vercel/pkg/pull/1323
 */
const childProcess = require('node:child_process');
const argvParser = require('yargs-parser');
/**
 * Chrome wrapper run method
 * @param  {Object} p         Node.js global variable
 * @param  {Object} execFile  child_process.execFile function
 * @return {Object}           child process running chrome
 */
function run(p, execFile) {
    console.info('[FAKE VSCode Binary] init...'); // eslint-disable-line no-console
    p.on('uncaughtException', 
    /* istanbul ignore next */
    // eslint-disable-next-line no-console
    (err) => console.info(`[FAKE VSCode Binary] Error: ${err.stack}`));
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { _: positionalParams, ...argv } = argvParser(process.argv.slice(2), {
        configuration: { 'camel-case-expansion': true, 'boolean-negation': false }
    });
    const binaryPath = argv.vscodeBinaryPath;
    if (!binaryPath) {
        throw new Error('Missing parameter "--vscode-binary-path=/..."');
    }
    const params = Object.entries(argv).map(([key, value]) => {
        if (typeof value === 'boolean' && value) {
            return `--${key}`;
        }
        return `--${key}=${value}`;
    });
    const args = [...params, ...positionalParams.map(String)];
    // eslint-disable-next-line no-console
    console.info(`[FAKE VSCode Binary] starting: ${binaryPath}`, args.join(' '));
    const cp = execFile(binaryPath, args, {
        env: p.env,
        cwd: p.cwd()
    });
    cp.stderr?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDERR: ${msg}`));
    cp.stdout?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDOUT: ${msg}`));
    return cp;
}
/* istanbul ignore if */
if (require.main === module) {
    run(process, childProcess.execFile);
}
else {
    module.exports = run;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hyb21pdW0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxRUFBcUU7QUFFckU7OztHQUdHO0FBQ0gsTUFBTSxZQUFZLEdBQXdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQ3ZGLE1BQU0sVUFBVSxHQUFrQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFFekU7Ozs7O0dBS0c7QUFDSCxTQUFTLEdBQUcsQ0FBRSxDQUFpQixFQUFFLFFBQXNDO0lBQ25FLE9BQU8sQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQSxDQUFDLGlDQUFpQztJQUU5RSxDQUFDLENBQUMsRUFBRSxDQUNBLG1CQUFtQjtJQUNuQiwwQkFBMEI7SUFDMUIsc0NBQXNDO0lBQ3RDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDcEUsQ0FBQTtJQUVELGdFQUFnRTtJQUNoRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3ZFLGFBQWEsRUFBRSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUU7S0FDN0UsQ0FBQyxDQUFBO0lBRUYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUEwQixDQUFBO0lBQ2xELElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDYixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUE7S0FDbkU7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDckQsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxHQUFHLEVBQUUsQ0FBQTtTQUNwQjtRQUNELE9BQU8sS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFDRixNQUFNLElBQUksR0FBYSxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFFbkUsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM1RSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRTtRQUNsQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUc7UUFDVixHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRTtLQUNmLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNULE1BQU07SUFDTixzQ0FBc0M7SUFDdEMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEdBQUcsRUFBRSxDQUFDLENBQzlELENBQUE7SUFDRCxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDVCxNQUFNO0lBQ04sc0NBQXNDO0lBQ3RDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxHQUFHLEVBQUUsQ0FBQyxDQUM5RCxDQUFBO0lBRUQsT0FBTyxFQUFFLENBQUE7QUFDYixDQUFDO0FBRUQsd0JBQXdCO0FBQ3hCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDekIsR0FBRyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUE7Q0FDdEM7S0FBTTtJQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFBO0NBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9zaGViYW5nLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovXG5cbi8qKlxuICogd2UgcmVxdWlyZSBoZXJlIGJlY2F1c2UgYHBrZ2AgZG9lc24ndCBzdXBwb3J0IEVTTSB5ZXRcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL3BrZy9wdWxsLzEzMjNcbiAqL1xuY29uc3QgY2hpbGRQcm9jZXNzOiB0eXBlb2YgaW1wb3J0KCdub2RlOmNoaWxkX3Byb2Nlc3MnKSA9IHJlcXVpcmUoJ25vZGU6Y2hpbGRfcHJvY2VzcycpXG5jb25zdCBhcmd2UGFyc2VyOiB0eXBlb2YgaW1wb3J0KCd5YXJncy1wYXJzZXInKSA9IHJlcXVpcmUoJ3lhcmdzLXBhcnNlcicpXG5cbi8qKlxuICogQ2hyb21lIHdyYXBwZXIgcnVuIG1ldGhvZFxuICogQHBhcmFtICB7T2JqZWN0fSBwICAgICAgICAgTm9kZS5qcyBnbG9iYWwgdmFyaWFibGVcbiAqIEBwYXJhbSAge09iamVjdH0gZXhlY0ZpbGUgIGNoaWxkX3Byb2Nlc3MuZXhlY0ZpbGUgZnVuY3Rpb25cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIGNoaWxkIHByb2Nlc3MgcnVubmluZyBjaHJvbWVcbiAqL1xuZnVuY3Rpb24gcnVuIChwOiBOb2RlSlMuUHJvY2VzcywgZXhlY0ZpbGU6IHR5cGVvZiBjaGlsZFByb2Nlc3MuZXhlY0ZpbGUpIHtcbiAgICBjb25zb2xlLmluZm8oJ1tGQUtFIFZTQ29kZSBCaW5hcnldIGluaXQuLi4nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblxuICAgIHAub24oXG4gICAgICAgICd1bmNhdWdodEV4Y2VwdGlvbicsXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIChlcnIpID0+IGNvbnNvbGUuaW5mbyhgW0ZBS0UgVlNDb2RlIEJpbmFyeV0gRXJyb3I6ICR7ZXJyLnN0YWNrfWApXG4gICAgKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIGNvbnN0IHsgXzogcG9zaXRpb25hbFBhcmFtcywgLi4uYXJndiB9ID0gYXJndlBhcnNlcihwcm9jZXNzLmFyZ3Yuc2xpY2UoMiksIHtcbiAgICAgICAgY29uZmlndXJhdGlvbjogeyAnY2FtZWwtY2FzZS1leHBhbnNpb24nOiB0cnVlLCAnYm9vbGVhbi1uZWdhdGlvbic6IGZhbHNlIH1cbiAgICB9KVxuXG4gICAgY29uc3QgYmluYXJ5UGF0aCA9IGFyZ3YudnNjb2RlQmluYXJ5UGF0aCBhcyBzdHJpbmdcbiAgICBpZiAoIWJpbmFyeVBhdGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHBhcmFtZXRlciBcIi0tdnNjb2RlLWJpbmFyeS1wYXRoPS8uLi5cIicpXG4gICAgfVxuXG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmVudHJpZXMoYXJndikubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICYmIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYC0tJHtrZXl9YFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgLS0ke2tleX09JHt2YWx1ZX1gXG4gICAgfSlcbiAgICBjb25zdCBhcmdzOiBzdHJpbmdbXSA9IFsuLi5wYXJhbXMsIC4uLnBvc2l0aW9uYWxQYXJhbXMubWFwKFN0cmluZyldXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuaW5mbyhgW0ZBS0UgVlNDb2RlIEJpbmFyeV0gc3RhcnRpbmc6ICR7YmluYXJ5UGF0aH1gLCBhcmdzLmpvaW4oJyAnKSlcbiAgICBjb25zdCBjcCA9IGV4ZWNGaWxlKGJpbmFyeVBhdGgsIGFyZ3MsIHtcbiAgICAgICAgZW52OiBwLmVudixcbiAgICAgICAgY3dkOiBwLmN3ZCgpXG4gICAgfSlcblxuICAgIGNwLnN0ZGVycj8ub24oXG4gICAgICAgICdkYXRhJyxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKG1zZykgPT4gY29uc29sZS5sb2coYFtGQUtFIFZTQ29kZSBCaW5hcnldIFNUREVSUjogJHttc2d9YClcbiAgICApXG4gICAgY3Auc3Rkb3V0Py5vbihcbiAgICAgICAgJ2RhdGEnLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAobXNnKSA9PiBjb25zb2xlLmxvZyhgW0ZBS0UgVlNDb2RlIEJpbmFyeV0gU1RET1VUOiAke21zZ31gKVxuICAgIClcblxuICAgIHJldHVybiBjcFxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICAgIHJ1bihwcm9jZXNzLCBjaGlsZFByb2Nlc3MuZXhlY0ZpbGUpXG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcnVuXG59XG4iXX0=