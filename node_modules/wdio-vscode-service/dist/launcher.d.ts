import { launcher as ChromedriverServiceLauncher } from 'wdio-chromedriver-service';
import type { Options, Capabilities } from '@wdio/types';
import type { ServiceOptions } from './types';
export default class VSCodeServiceLauncher extends ChromedriverServiceLauncher {
    private _options;
    private _capabilities;
    private _cachePath;
    private _vscodeServerPort?;
    constructor(_options: ServiceOptions, _capabilities: Capabilities.Capabilities, config: Options.Testrunner);
    onPrepare(_: never, capabilities: Capabilities.RemoteCapabilities): Promise<void>;
    /**
     * Set up VSCode for web testing
     * @param versionsFileExist true if we already have information stored about cached VSCode and Chromedriver bundles
     * @param versionsFilePath string with path to cached directory
     * @param cap capabilities used for this test run
     */
    private _setupVSCodeWeb;
    /**
     * Set up VSCode for desktop testing
     * @param versionsFileExist true if we already have information stored about cached VSCode and Chromedriver bundles
     * @param versionsFilePath string with path to cached directory
     * @param cap capabilities used for this test run
     */
    private _setupVSCodeDesktop;
    /**
     * Downloads Chromedriver bundle for given VSCode version
     * @param desiredReleaseChannel either release channel (e.g. "stable" or "insiders")
     *                              or a concrete version e.g. 1.66.0
     * @returns "insiders" if `desiredReleaseChannel` is set to this otherwise a concrete version
     */
    private _setupChromedriver;
    /**
     * Download VSCode bundle
     * @param version VSCode version
     * @returns path to downloaded VSCode bundle
     */
    private _downloadVSCode;
    /**
     * Get VSCode version based on desired channel or validate version if provided
     * @param desiredReleaseChannel either release channel (e.g. "stable" or "insiders")
     *                              or a concrete version e.g. 1.66.0
     * @returns "main" if `desiredReleaseChannel` is "insiders" otherwise a concrete VSCode version
     */
    private _fetchVSCodeVersion;
    /**
     * Fetches required Chromedriver version for given VSCode version
     * @param vscodeVersion branch or tag version of VSCode repository
     * @returns required Chromedriver version
     */
    private _fetchChromedriverVersion;
    /**
     * Fetches VSCode Web files
     * ToDo(Christian): allow to define a local VSCode development path
     *                  to be able to skip this part
     */
    private _fetchVSCodeWebStandalone;
    private _updateVersionsTxt;
    private _mapBrowserCapabilities;
}
//# sourceMappingURL=launcher.d.ts.map