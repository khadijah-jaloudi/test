import WebSocket from 'ws';
import { SETTINGS_KEY } from '../constants.js';
export async function run(vscode) {
    const config = vscode.workspace.getConfiguration(SETTINGS_KEY);
    console.log(`Connect to service proxy on port ${config.port}`);
    const ws = new WebSocket(`ws://localhost:${config.port}`);
    ws.on('open', () => console.log('WebSocket proxy connected'));
    ws.on('message', async (data) => {
        try {
            // eslint-disable-next-line @typescript-eslint/no-base-to-string
            const message = data.toString();
            console.log(`Received remote command: ${message}`);
            const { id, fn, params } = JSON.parse(message);
            try {
                // eslint-disable-next-line no-eval, @typescript-eslint/no-unsafe-call
                let result = eval(fn).call(globalThis, vscode, ...params);
                if (typeof result === 'object' && typeof result.then === 'function') {
                    result = await result;
                }
                const response = JSON.stringify({ id, result });
                console.log(`Return remote response: ${response}`);
                return ws.send(response);
            }
            catch (err) {
                return ws.send(JSON.stringify({ id, error: err.message }));
            }
        }
        catch (err) {
            console.error(`Failed run remote command: ${err.message}`);
        }
        return null;
    });
    return new Promise(() => { });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxTQUFTLE1BQU0sSUFBSSxDQUFBO0FBRTFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUc5QyxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBRSxNQUEyQjtJQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRTlELE1BQU0sRUFBRSxHQUFHLElBQUksU0FBUyxDQUFDLGtCQUFrQixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDNUIsSUFBSTtZQUNBLGdFQUFnRTtZQUNoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsT0FBTyxFQUFFLENBQUMsQ0FBQTtZQUVsRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBa0IsQ0FBQTtZQUUvRCxJQUFJO2dCQUNBLHNFQUFzRTtnQkFDdEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUE7Z0JBQ3pELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7b0JBQ2pFLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQTtpQkFDeEI7Z0JBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBaUIsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtnQkFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsUUFBUSxFQUFFLENBQUMsQ0FBQTtnQkFFbEQsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO2FBQzNCO1lBQUMsT0FBTyxHQUFRLEVBQUU7Z0JBQ2YsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQWlCLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQzdFO1NBQ0o7UUFBQyxPQUFPLEdBQVEsRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1NBQzdEO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDLENBQUMsQ0FBQTtJQUVGLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7QUFDaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzICovXG5pbXBvcnQgdHlwZSBWU0NvZGVJbXBvcnQgZnJvbSAndnNjb2RlJ1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cydcblxuaW1wb3J0IHsgU0VUVElOR1NfS0VZIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHR5cGUgeyBSZW1vdGVDb21tYW5kLCBSZW1vdGVSZXNwb25zZSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuICh2c2NvZGU6IHR5cGVvZiBWU0NvZGVJbXBvcnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjb25maWcgPSB2c2NvZGUud29ya3NwYWNlLmdldENvbmZpZ3VyYXRpb24oU0VUVElOR1NfS0VZKVxuICAgIGNvbnNvbGUubG9nKGBDb25uZWN0IHRvIHNlcnZpY2UgcHJveHkgb24gcG9ydCAke2NvbmZpZy5wb3J0fWApXG5cbiAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vbG9jYWxob3N0OiR7Y29uZmlnLnBvcnR9YClcbiAgICB3cy5vbignb3BlbicsICgpID0+IGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgcHJveHkgY29ubmVjdGVkJykpXG4gICAgd3Mub24oJ21lc3NhZ2UnLCBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1iYXNlLXRvLXN0cmluZ1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEudG9TdHJpbmcoKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYFJlY2VpdmVkIHJlbW90ZSBjb21tYW5kOiAke21lc3NhZ2V9YClcblxuICAgICAgICAgICAgY29uc3QgeyBpZCwgZm4sIHBhcmFtcyB9ID0gSlNPTi5wYXJzZShtZXNzYWdlKSBhcyBSZW1vdGVDb21tYW5kXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV2YWwsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBldmFsKGZuKS5jYWxsKGdsb2JhbFRoaXMsIHZzY29kZSwgLi4ucGFyYW1zKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcmVzdWx0XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnN0cmluZ2lmeSg8UmVtb3RlUmVzcG9uc2U+eyBpZCwgcmVzdWx0IH0pXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFJldHVybiByZW1vdGUgcmVzcG9uc2U6ICR7cmVzcG9uc2V9YClcblxuICAgICAgICAgICAgICAgIHJldHVybiB3cy5zZW5kKHJlc3BvbnNlKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3Muc2VuZChKU09OLnN0cmluZ2lmeSg8UmVtb3RlUmVzcG9uc2U+eyBpZCwgZXJyb3I6IGVyci5tZXNzYWdlIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHJ1biByZW1vdGUgY29tbWFuZDogJHtlcnIubWVzc2FnZX1gKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfSlcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSlcbn1cbiJdfQ==