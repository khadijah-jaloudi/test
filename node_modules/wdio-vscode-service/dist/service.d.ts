import { Services, Options } from '@wdio/types';
import { Workbench } from './pageobjects/index.js';
import type { VSCodeCapabilities } from './types';
export default class VSCodeWorkerService implements Services.ServiceInstance {
    private _capabilities;
    private _browser?;
    private _wss?;
    private _messageId;
    private _pendingMessages;
    private _promisedSocket?;
    private _proxyOptions;
    private _vscodeOptions;
    private _isWebSession;
    constructor(_: never, _capabilities: VSCodeCapabilities);
    private _handleIncoming;
    beforeSession(option: Options.Testrunner, capabilities: VSCodeCapabilities): Promise<void>;
    before(capabilities: VSCodeCapabilities, __: never, browser: WebdriverIO.Browser): Promise<void>;
    after(): Promise<void>;
    private _executeVSCode;
}
interface VSCodeCommands {
    getWorkbench: () => Promise<Workbench>;
    executeWorkbench: <T>(fn: (vscode: any, ...params: any[]) => T, ...params: any[]) => Promise<T>;
    getVSCodeVersion: () => Promise<string>;
    getVSCodeChannel: () => Promise<string>;
    isVSCodeWebSession: () => Promise<boolean>;
}
declare global {
    namespace WebdriverIO {
        interface Browser extends VSCodeCommands {
        }
    }
    namespace WebdriverIOAsync {
        interface Browser extends VSCodeCommands {
        }
        interface MultiRemoteBrowser extends VSCodeCommands {
        }
    }
}
export {};
//# sourceMappingURL=service.d.ts.map