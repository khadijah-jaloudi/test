var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { PageDecorator, BasePage } from '../utils.js';
import { Dialog as DialogLocators } from '../../locators/1.73.0.js';
/**
 * Page Object for Custom Style Modal Dialogs (non-native)
 *
 * @category Dialog
 */
export let ModalDialog = class ModalDialog extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Dialog';
    }
    /**
     * Get the dialog's message in a Promise
     */
    async getMessage() {
        return this.message$.getText();
    }
    /**
     * Get the details message in a Promise
     */
    async getDetails() {
        return this.details$.getText();
    }
    /**
     * Get the list of buttons as WebElements
     *
     * @returns Promise resolving to Array of WebElement items representing the buttons
     */
    async getButtons() {
        return this.buttonContainer$.$$(this.locators.button);
    }
    /**
     * Push a button with given title if it exists
     *
     * @param title title/text of the button
     */
    async pushButton(title) {
        const buttons = await this.getButtons();
        const titles = await Promise.all(buttons.map(async (btn) => btn.getAttribute('title')));
        const index = titles.findIndex((value) => value === title);
        if (index > -1) {
            await buttons[index].click();
        }
    }
    /**
     * Close the dialog using the 'cross' button
     */
    async close() {
        return this.closeButton$.click();
    }
};
ModalDialog = __decorate([
    PageDecorator(DialogLocators)
], ModalDialog);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWxEaWFsb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvZGlhbG9nL01vZGFsRGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWtCLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUNyRSxPQUFPLEVBQUUsTUFBTSxJQUFJLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBR25FOzs7O0dBSUc7QUFFSSxXQUFNLFdBQVcsR0FBakIsTUFBTSxXQUFZLFNBQVEsUUFBK0I7SUFBekQ7O1FBQ0g7O1dBRUc7UUFDSSxlQUFVLEdBQUcsUUFBaUIsQ0FBQTtJQTZDekMsQ0FBQztJQTNDRzs7T0FFRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUUsS0FBYTtRQUMzQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2RixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUE7UUFDMUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDWixNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUMvQjtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3BDLENBQUM7Q0FDSixDQUFBO0FBakRZLFdBQVc7SUFEdkIsYUFBYSxDQUFDLGNBQWMsQ0FBQztHQUNqQixXQUFXLENBaUR2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBCYXNlUGFnZSB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgRGlhbG9nIGFzIERpYWxvZ0xvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsRGlhbG9nIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIERpYWxvZ0xvY2F0b3JzPiB7fVxuLyoqXG4gKiBQYWdlIE9iamVjdCBmb3IgQ3VzdG9tIFN0eWxlIE1vZGFsIERpYWxvZ3MgKG5vbi1uYXRpdmUpXG4gKlxuICogQGNhdGVnb3J5IERpYWxvZ1xuICovXG5AUGFnZURlY29yYXRvcihEaWFsb2dMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBNb2RhbERpYWxvZyBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBEaWFsb2dMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnRGlhbG9nJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkaWFsb2cncyBtZXNzYWdlIGluIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGFzeW5jIGdldE1lc3NhZ2UgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2UkLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGV0YWlscyBtZXNzYWdlIGluIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGFzeW5jIGdldERldGFpbHMgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRldGFpbHMkLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBidXR0b25zIGFzIFdlYkVsZW1lbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBBcnJheSBvZiBXZWJFbGVtZW50IGl0ZW1zIHJlcHJlc2VudGluZyB0aGUgYnV0dG9uc1xuICAgICAqL1xuICAgIGFzeW5jIGdldEJ1dHRvbnMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idXR0b25Db250YWluZXIkLiQkKHRoaXMubG9jYXRvcnMuYnV0dG9uKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1c2ggYSBidXR0b24gd2l0aCBnaXZlbiB0aXRsZSBpZiBpdCBleGlzdHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aXRsZSB0aXRsZS90ZXh0IG9mIHRoZSBidXR0b25cbiAgICAgKi9cbiAgICBhc3luYyBwdXNoQnV0dG9uICh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBhd2FpdCB0aGlzLmdldEJ1dHRvbnMoKVxuICAgICAgICBjb25zdCB0aXRsZXMgPSBhd2FpdCBQcm9taXNlLmFsbChidXR0b25zLm1hcChhc3luYyAoYnRuKSA9PiBidG4uZ2V0QXR0cmlidXRlKCd0aXRsZScpKSlcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aXRsZXMuZmluZEluZGV4KCh2YWx1ZSkgPT4gdmFsdWUgPT09IHRpdGxlKVxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgYXdhaXQgYnV0dG9uc1tpbmRleF0uY2xpY2soKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGRpYWxvZyB1c2luZyB0aGUgJ2Nyb3NzJyBidXR0b25cbiAgICAgKi9cbiAgICBhc3luYyBjbG9zZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlQnV0dG9uJC5jbGljaygpXG4gICAgfVxufVxuIl19