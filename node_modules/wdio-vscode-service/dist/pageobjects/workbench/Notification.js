var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { Notification as NotificationLocators } from '../../locators/1.73.0.js';
/**
 * Available types of notifications
 * @hidden
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType["Info"] = "info";
    NotificationType["Warning"] = "warning";
    NotificationType["Error"] = "error";
    NotificationType["Any"] = "any";
})(NotificationType || (NotificationType = {}));
/**
 * Notification button
 *
 * @category Workbench
 */
class NotificationButton extends BasePage {
    constructor(locators, title) {
        super(locators, locators.Notification.buttonConstructor(title));
        /**
         * @private
         */
        this.locatorKey = 'Notification';
        this.title = title;
    }
    getTitle() {
        return this.title;
    }
}
/**
 * Abstract element representing a notification
 *
 * @category Workbench
 */
export class Notification extends BasePage {
    /**
     * Get the message of the notification
     * @returns Promise resolving to notification message
     */
    getMessage() {
        return this.message$.getText();
    }
    /**
     * Get the type of the notification
     * @returns Promise resolving to NotificationType
     */
    async getType() {
        const iconType = await this.icon$.getAttribute('class');
        if (iconType.indexOf('icon-info') > -1) {
            return NotificationType.Info;
        }
        if (iconType.indexOf('icon-warning') > -1) {
            return NotificationType.Warning;
        }
        return NotificationType.Error;
    }
    /**
     * Get the source of the notification as text
     * @returns Promise resolving to notification source
     */
    async getSource() {
        await this.expand();
        return this.source$.getAttribute('title');
    }
    /**
     * Find whether the notification has an active progress bar
     * @returns Promise resolving to true/false
     */
    async hasProgress() {
        const klass = await this.progress$.getAttribute('class');
        return klass.indexOf('done') < 0;
    }
    /**
     * Dismiss the notification
     * @returns Promise resolving when notification is dismissed
     */
    async dismiss() {
        const btn = await this.dismiss$;
        /**
         * make button interactable given they only contain
         * text on hover
         */
        await browser.execute((btnSection) => { btnSection.style.display = 'block'; }, await this.btnSection$);
        await btn.click();
    }
    /**
     * Get the action buttons of the notification as an array
     * of NotificationButton objects
     * @returns Promise resolving to array of NotificationButton objects
     */
    async getActions() {
        const buttons = [];
        const elements = await this.actions$
            .$$(this.locators.action);
        for (const button of elements) {
            buttons.push(await new NotificationButton(this.locatorMap, await button.getAttribute(this.locators.actionLabel)).wait());
        }
        return buttons;
    }
    /**
     * Click on an action button with the given title
     * @param title title of the action/button
     * @returns Promise resolving when the select button is pressed
     */
    async takeAction(title) {
        await new NotificationButton(this.locatorMap, title).elem.click();
    }
    /**
     * Expand the notification if possible
     */
    async expand() {
        await this.elem.moveTo();
        const exp = await this.expand$$;
        if (exp[0]) {
            await exp[0].click();
        }
    }
}
/**
 * Notification displayed on its own in the notifications-toasts container
 *
 * @category Workbench
 */
export let StandaloneNotification = class StandaloneNotification extends Notification {
    constructor(locators, notification) {
        super(locators, notification, locators.Notification.standaloneContainer);
        /**
         * @private
         */
        this.locatorKey = 'Notification';
    }
};
StandaloneNotification = __decorate([
    PageDecorator(NotificationLocators)
], StandaloneNotification);
/**
 * Notification displayed within the notifications center
 *
 * @category Workbench
 */
export let CenterNotification = class CenterNotification extends Notification {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Notification';
    }
};
CenterNotification = __decorate([
    PageDecorator(NotificationLocators)
], CenterNotification);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3dvcmtiZW5jaC9Ob3RpZmljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUNILFFBQVEsRUFBa0IsYUFBYSxFQUMxQyxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQUUsWUFBWSxJQUFJLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFFL0U7OztHQUdHO0FBQ0gsTUFBTSxDQUFOLElBQVksZ0JBS1g7QUFMRCxXQUFZLGdCQUFnQjtJQUN4QixpQ0FBYSxDQUFBO0lBQ2IsdUNBQW1CLENBQUE7SUFDbkIsbUNBQWUsQ0FBQTtJQUNmLCtCQUFXLENBQUE7QUFDZixDQUFDLEVBTFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUszQjtBQUdEOzs7O0dBSUc7QUFDSCxNQUFNLGtCQUFtQixTQUFRLFFBQXFDO0lBUWxFLFlBQ0ksUUFBMEIsRUFDMUIsS0FBYTtRQUViLEtBQUssQ0FBQyxRQUFRLEVBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQkFBOEIsQ0FBQyxLQUFLLENBQVcsQ0FBQyxDQUFBO1FBWDNGOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGNBQXVCLENBQUE7UUFTdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDckIsQ0FBQztDQUNKO0FBR0Q7Ozs7R0FJRztBQUNILE1BQU0sT0FBZ0IsWUFBYSxTQUFRLFFBQXFDO0lBQzVFOzs7T0FHRztJQUNILFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDbEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FB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QUF1QixDQUFBO0lBTzNDLENBQUM7Q0FDSixDQUFBO0FBWlksc0JBQXNCO0lBRGxDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztHQUN2QixzQkFBc0IsQ0FZbEM7QUFFRDs7OztHQUlHO0FBRUksV0FBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBbUIsU0FBUSxZQUFZO0lBQTdDOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGNBQXVCLENBQUE7SUFDL0MsQ0FBQztDQUFBLENBQUE7QUFMWSxrQkFBa0I7SUFEOUIsYUFBYSxDQUFDLG9CQUFvQixDQUFDO0dBQ3ZCLGtCQUFrQixDQUs5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluYWJsZVByb21pc2VFbGVtZW50IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5pbXBvcnQge1xuICAgIEJhc2VQYWdlLCBJUGFnZURlY29yYXRvciwgUGFnZURlY29yYXRvciwgVlNDb2RlTG9jYXRvck1hcFxufSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IE5vdGlmaWNhdGlvbiBhcyBOb3RpZmljYXRpb25Mb2NhdG9ycyB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuLyoqXG4gKiBBdmFpbGFibGUgdHlwZXMgb2Ygbm90aWZpY2F0aW9uc1xuICogQGhpZGRlblxuICovXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25UeXBlIHtcbiAgICBJbmZvID0gJ2luZm8nLFxuICAgIFdhcm5pbmcgPSAnd2FybmluZycsXG4gICAgRXJyb3IgPSAnZXJyb3InLFxuICAgIEFueSA9ICdhbnknXG59XG5cbmludGVyZmFjZSBOb3RpZmljYXRpb25CdXR0b24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgTm90aWZpY2F0aW9uTG9jYXRvcnM+IHt9XG4vKipcbiAqIE5vdGlmaWNhdGlvbiBidXR0b25cbiAqXG4gKiBAY2F0ZWdvcnkgV29ya2JlbmNoXG4gKi9cbmNsYXNzIE5vdGlmaWNhdGlvbkJ1dHRvbiBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBOb3RpZmljYXRpb25Mb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnTm90aWZpY2F0aW9uJyBhcyBjb25zdFxuXG4gICAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICB0aXRsZTogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCAobG9jYXRvcnMuTm90aWZpY2F0aW9uLmJ1dHRvbkNvbnN0cnVjdG9yIGFzIEZ1bmN0aW9uKSh0aXRsZSkgYXMgc3RyaW5nKVxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcbiAgICB9XG5cbiAgICBnZXRUaXRsZSAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGl0bGVcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIE5vdGlmaWNhdGlvbkxvY2F0b3JzPiB7fVxuLyoqXG4gKiBBYnN0cmFjdCBlbGVtZW50IHJlcHJlc2VudGluZyBhIG5vdGlmaWNhdGlvblxuICpcbiAqIEBjYXRlZ29yeSBXb3JrYmVuY2hcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5vdGlmaWNhdGlvbiBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBOb3RpZmljYXRpb25Mb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWVzc2FnZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gbm90aWZpY2F0aW9uIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBnZXRNZXNzYWdlICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlJC5nZXRUZXh0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHR5cGUgb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIE5vdGlmaWNhdGlvblR5cGVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRUeXBlICgpOiBQcm9taXNlPE5vdGlmaWNhdGlvblR5cGU+IHtcbiAgICAgICAgY29uc3QgaWNvblR5cGUgPSBhd2FpdCB0aGlzLmljb24kLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuICAgICAgICBpZiAoaWNvblR5cGUuaW5kZXhPZignaWNvbi1pbmZvJykgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvblR5cGUuSW5mb1xuICAgICAgICB9IGlmIChpY29uVHlwZS5pbmRleE9mKCdpY29uLXdhcm5pbmcnKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uVHlwZS5XYXJuaW5nXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5vdGlmaWNhdGlvblR5cGUuRXJyb3JcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNvdXJjZSBvZiB0aGUgbm90aWZpY2F0aW9uIGFzIHRleHRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBub3RpZmljYXRpb24gc291cmNlXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U291cmNlICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4cGFuZCgpXG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZSQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB3aGV0aGVyIHRoZSBub3RpZmljYXRpb24gaGFzIGFuIGFjdGl2ZSBwcm9ncmVzcyBiYXJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0cnVlL2ZhbHNlXG4gICAgICovXG4gICAgYXN5bmMgaGFzUHJvZ3Jlc3MgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBrbGFzcyA9IGF3YWl0IHRoaXMucHJvZ3Jlc3MkLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuICAgICAgICByZXR1cm4ga2xhc3MuaW5kZXhPZignZG9uZScpIDwgMFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc21pc3MgdGhlIG5vdGlmaWNhdGlvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gbm90aWZpY2F0aW9uIGlzIGRpc21pc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIGRpc21pc3MgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBidG4gPSBhd2FpdCB0aGlzLmRpc21pc3MkXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1ha2UgYnV0dG9uIGludGVyYWN0YWJsZSBnaXZlbiB0aGV5IG9ubHkgY29udGFpblxuICAgICAgICAgKiB0ZXh0IG9uIGhvdmVyXG4gICAgICAgICAqL1xuICAgICAgICBhd2FpdCBicm93c2VyLmV4ZWN1dGUoXG4gICAgICAgICAgICAoYnRuU2VjdGlvbikgPT4geyBidG5TZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snIH0sXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJ0blNlY3Rpb24kIGFzIGFueSBhcyBIVE1MTGlua0VsZW1lbnRcbiAgICAgICAgKVxuXG4gICAgICAgIGF3YWl0IGJ0bi5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhY3Rpb24gYnV0dG9ucyBvZiB0aGUgbm90aWZpY2F0aW9uIGFzIGFuIGFycmF5XG4gICAgICogb2YgTm90aWZpY2F0aW9uQnV0dG9uIG9iamVjdHNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBhcnJheSBvZiBOb3RpZmljYXRpb25CdXR0b24gb2JqZWN0c1xuICAgICAqL1xuICAgIGFzeW5jIGdldEFjdGlvbnMgKCk6IFByb21pc2U8Tm90aWZpY2F0aW9uQnV0dG9uW10+IHtcbiAgICAgICAgY29uc3QgYnV0dG9uczogTm90aWZpY2F0aW9uQnV0dG9uW10gPSBbXVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMuYWN0aW9ucyRcbiAgICAgICAgICAgIC4kJCh0aGlzLmxvY2F0b3JzLmFjdGlvbilcblxuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGF3YWl0IG5ldyBOb3RpZmljYXRpb25CdXR0b24oXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgICAgIGF3YWl0IGJ1dHRvbi5nZXRBdHRyaWJ1dGUodGhpcy5sb2NhdG9ycy5hY3Rpb25MYWJlbClcbiAgICAgICAgICAgICkud2FpdCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidXR0b25zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgb24gYW4gYWN0aW9uIGJ1dHRvbiB3aXRoIHRoZSBnaXZlbiB0aXRsZVxuICAgICAqIEBwYXJhbSB0aXRsZSB0aXRsZSBvZiB0aGUgYWN0aW9uL2J1dHRvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gdGhlIHNlbGVjdCBidXR0b24gaXMgcHJlc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIHRha2VBY3Rpb24gKHRpdGxlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IE5vdGlmaWNhdGlvbkJ1dHRvbihcbiAgICAgICAgICAgIHRoaXMubG9jYXRvck1hcCxcbiAgICAgICAgICAgIHRpdGxlXG4gICAgICAgICkuZWxlbS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhwYW5kIHRoZSBub3RpZmljYXRpb24gaWYgcG9zc2libGVcbiAgICAgKi9cbiAgICBhc3luYyBleHBhbmQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmVsZW0ubW92ZVRvKClcbiAgICAgICAgY29uc3QgZXhwID0gYXdhaXQgdGhpcy5leHBhbmQkJFxuICAgICAgICBpZiAoZXhwWzBdKSB7XG4gICAgICAgICAgICBhd2FpdCBleHBbMF0uY2xpY2soKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGlmaWNhdGlvbiBkaXNwbGF5ZWQgb24gaXRzIG93biBpbiB0aGUgbm90aWZpY2F0aW9ucy10b2FzdHMgY29udGFpbmVyXG4gKlxuICogQGNhdGVnb3J5IFdvcmtiZW5jaFxuICovXG5AUGFnZURlY29yYXRvcihOb3RpZmljYXRpb25Mb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBTdGFuZGFsb25lTm90aWZpY2F0aW9uIGV4dGVuZHMgTm90aWZpY2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ05vdGlmaWNhdGlvbicgYXMgY29uc3RcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIG5vdGlmaWNhdGlvbjogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD5cbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIG5vdGlmaWNhdGlvbiwgbG9jYXRvcnMuTm90aWZpY2F0aW9uLnN0YW5kYWxvbmVDb250YWluZXIgYXMgc3RyaW5nKVxuICAgIH1cbn1cblxuLyoqXG4gKiBOb3RpZmljYXRpb24gZGlzcGxheWVkIHdpdGhpbiB0aGUgbm90aWZpY2F0aW9ucyBjZW50ZXJcbiAqXG4gKiBAY2F0ZWdvcnkgV29ya2JlbmNoXG4gKi9cbkBQYWdlRGVjb3JhdG9yKE5vdGlmaWNhdGlvbkxvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIENlbnRlck5vdGlmaWNhdGlvbiBleHRlbmRzIE5vdGlmaWNhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdOb3RpZmljYXRpb24nIGFzIGNvbnN0XG59XG4iXX0=