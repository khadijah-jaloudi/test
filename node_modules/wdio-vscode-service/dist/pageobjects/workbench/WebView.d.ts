import { ChainablePromiseElement } from 'webdriverio';
import { BasePage, IPageDecorator } from '../utils.js';
import { WebView as WebViewLocators } from '../../locators/1.73.0.js';
import type { VSCodeLocatorMap } from '../utils';
export interface WebView extends IPageDecorator<typeof WebViewLocators> {
}
export declare class WebView extends BasePage<typeof WebViewLocators> {
    /**
     * @private locator key to identify locator map (see locators.ts)
     */
    locatorKey: "WebView";
    get activeFrame(): ChainablePromiseElement<WebdriverIO.Element>;
    /**
     * Switch WebDriver context to given webview so subsequent element
     * calls are targeting elements within the webview.
     *
     * __Note:__ ensure to call `webview.close()` to leave the webview
     * context before using other page objects.
     */
    open(): Promise<void>;
    /**
     * Switch from the webview context back to the VSCode context.
     */
    close(): Promise<void>;
    /**
     * Get all available WebViews (including the once in the sidebar or from the editor)
     * @param locators locator map
     * @returns a list of webview objects
     */
    static getAllWebViews(locators: VSCodeLocatorMap): Promise<WebView[]>;
}
//# sourceMappingURL=WebView.d.ts.map