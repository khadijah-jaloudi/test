import { TitleBar } from '../menu/TitleBar.js';
import { SideBarView } from '../sidebar/SideBarView.js';
import { ActivityBar } from '../activityBar/ActivityBar.js';
import { StatusBar } from '../statusBar/StatusBar.js';
import { EditorView } from '../editor/EditorView.js';
import { BottomBarPanel } from '../bottomBar/BottomBarPanel.js';
import { Notification } from './Notification.js';
import { NotificationsCenter } from './NotificationsCenter.js';
import { QuickOpenBox, InputBox } from './Input.js';
import { SettingsEditor } from '../editor/SettingsEditor.js';
import { WebView } from './WebView.js';
import { IPageDecorator, BasePage } from '../utils.js';
import { Workbench as WorkbenchLocators } from '../../locators/1.73.0.js';
export interface Workbench extends IPageDecorator<typeof WorkbenchLocators> {
}
/**
 * Page object representing the custom VSCode title bar
 *
 * @category Workbench
 */
export declare class Workbench extends BasePage<typeof WorkbenchLocators> {
    /**
     * @private
     */
    locatorKey: "Workbench";
    /**
     * Get a title bar handle
     */
    getTitleBar(): TitleBar;
    /**
     * Get a side bar handle
     */
    getSideBar(): SideBarView<any>;
    /**
     * Get an activity bar handle
     */
    getActivityBar(): ActivityBar;
    /**
     * Get a status bar handle
     */
    getStatusBar(): StatusBar;
    /**
     * Get a bottom bar handle
     */
    getBottomBar(): BottomBarPanel;
    /**
     * Get a handle for the editor view
     */
    getEditorView(): EditorView;
    /**
     * Get all available webviews
     */
    getAllWebviews(): Promise<WebView[]>;
    /**
     * Get webview by title
     */
    getWebviewByTitle(title: string | RegExp): Promise<WebView>;
    /**
     * Get all standalone notifications (notifications outside the notifications center)
     * @returns Promise resolving to array of Notification objects
     */
    getNotifications(): Promise<Notification[]>;
    /**
     * Verifies if any notifications are shown
     * @returns true if workbench has notifications, false otherwise
     */
    hasNotifications(): Promise<boolean>;
    /**
     * Opens the notifications center
     * @returns Promise resolving to NotificationsCenter object
     */
    openNotificationsCenter(): Promise<NotificationsCenter>;
    /**
     * Opens the settings editor
     *
     * @returns promise that resolves to a SettingsEditor instance
     */
    openSettings(): Promise<SettingsEditor>;
    /**
     * Open the VS Code command line prompt
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     */
    openCommandPrompt(): Promise<QuickOpenBox | InputBox>;
    /**
     * Open the command prompt, type in a command, find the command using a fuzzy match, and execute
     * @param command text of the command to be executed
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     * when the command prompt is confirmed
     */
    executeCommand(command: string): Promise<InputBox | QuickOpenBox>;
    /**
     * Open the command prompt, type in a command, find the command from the quick pick list, and execute
     * @param command text of the command to be executed
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     * when the command prompt is confirmed
     */
    executeQuickPick(command: string): Promise<InputBox | QuickOpenBox>;
}
//# sourceMappingURL=Workbench.d.ts.map