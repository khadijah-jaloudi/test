var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { DebugToolbar as DebugToolbarLocators } from '../../locators/1.73.0.js';
/**
 * Page object for the Debugger Toolbar
 *
 * @category Workbench
 */
export let DebugToolbar = class DebugToolbar extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DebugToolbar';
    }
    /**
     * Wait for the execution to pause at the next breakpoint
     */
    async waitForBreakPoint() {
        await browser.waitUntil(async () => {
            const btn = await this.button$('continue');
            return btn.isEnabled();
        });
    }
    /**
     * Click Continue
     */
    async continue() {
        await this.getButton('continue').click();
    }
    /**
     * Click Disconnect
     */
    async disconnect() {
        await this.getButton('disconnect').click();
    }
    /**
     * Click Pause
     */
    async pause() {
        await this.getButton('pause').click();
    }
    /**
     * Click Step Over
     */
    async stepOver() {
        await this.getButton('step-oer').click();
    }
    /**
     * Click Step Into
     */
    async stepInto() {
        await this.getButton('step-ito').click();
    }
    /**
     * Click Step Out
     */
    async stepOut() {
        await this.getButton('step-ot').click();
    }
    /**
     * Click Restart
     */
    async restart() {
        await this.getButton('restart').click();
    }
    /**
     * Click Stop
     */
    async stop() {
        await this.getButton('stop').click();
    }
    getButton(name) {
        return this.button$(name);
    }
};
DebugToolbar = __decorate([
    PageDecorator(DebugToolbarLocators)
], DebugToolbar);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdUb29sYmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3dvcmtiZW5jaC9EZWJ1Z1Rvb2xiYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLElBQUksb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUcvRTs7OztHQUlHO0FBRUksV0FBTSxZQUFZLEdBQWxCLE1BQU0sWUFBYSxTQUFRLFFBQXFDO0lBQWhFOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGNBQXVCLENBQUE7SUF1RS9DLENBQUM7SUFyRUc7O09BRUc7SUFDSCxLQUFLLENBQUMsaUJBQWlCO1FBQ25CLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDMUMsT0FBTyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDMUIsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsVUFBVTtRQUNaLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsS0FBSztRQUNQLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsT0FBTztRQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsT0FBTztRQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsSUFBSTtRQUNOLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN4QyxDQUFDO0lBRU8sU0FBUyxDQUFFLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdCLENBQUM7Q0FDSixDQUFBO0FBM0VZLFlBQVk7SUFEeEIsYUFBYSxDQUFDLG9CQUFvQixDQUFDO0dBQ3ZCLFlBQVksQ0EyRXhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcbmltcG9ydCB7IEJhc2VQYWdlLCBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgRGVidWdUb29sYmFyIGFzIERlYnVnVG9vbGJhckxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIERlYnVnVG9vbGJhciBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBEZWJ1Z1Rvb2xiYXJMb2NhdG9ycz4ge31cbi8qKlxuICogUGFnZSBvYmplY3QgZm9yIHRoZSBEZWJ1Z2dlciBUb29sYmFyXG4gKlxuICogQGNhdGVnb3J5IFdvcmtiZW5jaFxuICovXG5AUGFnZURlY29yYXRvcihEZWJ1Z1Rvb2xiYXJMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBEZWJ1Z1Rvb2xiYXIgZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgRGVidWdUb29sYmFyTG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ0RlYnVnVG9vbGJhcicgYXMgY29uc3RcblxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHRoZSBleGVjdXRpb24gdG8gcGF1c2UgYXQgdGhlIG5leHQgYnJlYWtwb2ludFxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JCcmVha1BvaW50ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci53YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnRuID0gYXdhaXQgdGhpcy5idXR0b24kKCdjb250aW51ZScpXG4gICAgICAgICAgICByZXR1cm4gYnRuLmlzRW5hYmxlZCgpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgQ29udGludWVcbiAgICAgKi9cbiAgICBhc3luYyBjb250aW51ZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdjb250aW51ZScpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBEaXNjb25uZWN0XG4gICAgICovXG4gICAgYXN5bmMgZGlzY29ubmVjdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdkaXNjb25uZWN0JykuY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIFBhdXNlXG4gICAgICovXG4gICAgYXN5bmMgcGF1c2UgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1dHRvbigncGF1c2UnKS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgU3RlcCBPdmVyXG4gICAgICovXG4gICAgYXN5bmMgc3RlcE92ZXIgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1dHRvbignc3RlcC1vZXInKS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgU3RlcCBJbnRvXG4gICAgICovXG4gICAgYXN5bmMgc3RlcEludG8gKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1dHRvbignc3RlcC1pdG8nKS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgU3RlcCBPdXRcbiAgICAgKi9cbiAgICBhc3luYyBzdGVwT3V0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRCdXR0b24oJ3N0ZXAtb3QnKS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgUmVzdGFydFxuICAgICAqL1xuICAgIGFzeW5jIHJlc3RhcnQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1dHRvbigncmVzdGFydCcpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBTdG9wXG4gICAgICovXG4gICAgYXN5bmMgc3RvcCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdzdG9wJykuY2xpY2soKVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QnV0dG9uIChuYW1lOiBzdHJpbmcpOiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvbiQobmFtZSlcbiAgICB9XG59XG4iXX0=