var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { CenterNotification, NotificationType } from './Notification.js';
import { BasePage, PageDecorator } from '../utils.js';
import { NotificationsCenter as NotificationsCenterLocator } from '../../locators/1.73.0.js';
/**
 * Notifications center page object
 *
 * @category Workbench
 */
export let NotificationsCenter = class NotificationsCenter extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'NotificationsCenter';
    }
    /**
     * Close the notifications center
     * @returns Promise resolving when the center is closed
     */
    async close() {
        if (await this.elem.isDisplayed()) {
            await this.closeBtn$.click();
        }
    }
    /**
     * Clear all notifications in the notifications center
     * Note that this will also hide the notifications center
     * @returns Promise resolving when the clear all button is pressed
     */
    async clearAllNotifications() {
        return this.clear$.click();
    }
    /**
     * Get all notifications of a given type
     * @param type type of the notifications to look for,
     *             NotificationType.Any will retrieve all notifications
     *
     * @returns Promise resolving to array of Notification objects
     */
    async getNotifications(type) {
        const notifications = [];
        const elements = await this.row$$;
        for (const element of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const not = new CenterNotification(this.locatorMap, element);
            if (type === NotificationType.Any || await not.getType() === type) {
                notifications.push(await not.wait());
            }
        }
        return notifications;
    }
};
NotificationsCenter = __decorate([
    PageDecorator(NotificationsCenterLocator)
], NotificationsCenter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uc0NlbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy93b3JrYmVuY2gvTm90aWZpY2F0aW9uc0NlbnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWdCLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDdEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQ3JFLE9BQU8sRUFBRSxtQkFBbUIsSUFBSSwwQkFBMEIsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRzVGOzs7O0dBSUc7QUFFSSxXQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFvQixTQUFRLFFBQTJDO0lBQTdFOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLHFCQUE4QixDQUFBO0lBeUN0RCxDQUFDO0lBdkNHOzs7T0FHRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1AsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQy9CO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMscUJBQXFCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUFFLElBQXNCO1FBQzFDLE1BQU0sYUFBYSxHQUFtQixFQUFFLENBQUE7UUFDeEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFBO1FBRWpDLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLGlFQUFpRTtZQUNqRSxNQUFNLEdBQUcsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBYyxDQUFDLENBQUE7WUFDbkUsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLENBQUMsR0FBRyxJQUFJLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtnQkFDL0QsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO2FBQ3ZDO1NBQ0o7UUFDRCxPQUFPLGFBQWEsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTtBQTdDWSxtQkFBbUI7SUFEL0IsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0dBQzdCLG1CQUFtQixDQTZDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmljYXRpb24sIENlbnRlck5vdGlmaWNhdGlvbiwgTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gJy4vTm90aWZpY2F0aW9uLmpzJ1xuaW1wb3J0IHsgQmFzZVBhZ2UsIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yIH0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zQ2VudGVyIGFzIE5vdGlmaWNhdGlvbnNDZW50ZXJMb2NhdG9yIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbnNDZW50ZXIgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgTm90aWZpY2F0aW9uc0NlbnRlckxvY2F0b3I+IHt9XG4vKipcbiAqIE5vdGlmaWNhdGlvbnMgY2VudGVyIHBhZ2Ugb2JqZWN0XG4gKlxuICogQGNhdGVnb3J5IFdvcmtiZW5jaFxuICovXG5AUGFnZURlY29yYXRvcihOb3RpZmljYXRpb25zQ2VudGVyTG9jYXRvcilcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25zQ2VudGVyIGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIE5vdGlmaWNhdGlvbnNDZW50ZXJMb2NhdG9yPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdOb3RpZmljYXRpb25zQ2VudGVyJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgY2VudGVyIGlzIGNsb3NlZFxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuZWxlbS5pc0Rpc3BsYXllZCgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlQnRuJC5jbGljaygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgbm90aWZpY2F0aW9ucyBpbiB0aGUgbm90aWZpY2F0aW9ucyBjZW50ZXJcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyB3aWxsIGFsc28gaGlkZSB0aGUgbm90aWZpY2F0aW9ucyBjZW50ZXJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHRoZSBjbGVhciBhbGwgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKi9cbiAgICBhc3luYyBjbGVhckFsbE5vdGlmaWNhdGlvbnMgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhciQuY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgbm90aWZpY2F0aW9ucyBvZiBhIGdpdmVuIHR5cGVcbiAgICAgKiBAcGFyYW0gdHlwZSB0eXBlIG9mIHRoZSBub3RpZmljYXRpb25zIHRvIGxvb2sgZm9yLFxuICAgICAqICAgICAgICAgICAgIE5vdGlmaWNhdGlvblR5cGUuQW55IHdpbGwgcmV0cmlldmUgYWxsIG5vdGlmaWNhdGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIE5vdGlmaWNhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Tm90aWZpY2F0aW9ucyAodHlwZTogTm90aWZpY2F0aW9uVHlwZSk6IFByb21pc2U8Tm90aWZpY2F0aW9uW10+IHtcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uczogTm90aWZpY2F0aW9uW10gPSBbXVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMucm93JCRcblxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICBjb25zdCBub3QgPSBuZXcgQ2VudGVyTm90aWZpY2F0aW9uKHRoaXMubG9jYXRvck1hcCwgZWxlbWVudCBhcyBhbnkpXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gTm90aWZpY2F0aW9uVHlwZS5BbnkgfHwgYXdhaXQgbm90LmdldFR5cGUoKSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnMucHVzaChhd2FpdCBub3Qud2FpdCgpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3RpZmljYXRpb25zXG4gICAgfVxufVxuIl19