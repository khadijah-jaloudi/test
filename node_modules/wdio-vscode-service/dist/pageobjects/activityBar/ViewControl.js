var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DebugView, SideBarView, ScmView } from '../../index.js';
import { NewScmView } from '../sidebar/scm/NewScmView.js';
import { PageDecorator, ElementWithContextMenu } from '../utils.js';
import { ViewControl as ViewControlLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing a view container item in the activity bar
 *
 * ```ts
 * const workbench = await browser.getWorkbench()
 * const viewControls = await workbench.getActivityBar().getViewControls()
 * console.log(await Promise.all(viewControls.map((vc) => vc.getTitle())))
 * // returns: [
 * //    'Explorer',
 * //    'Search',
 * //    'Source Control',
 * //    'Run and Debug',
 * //    'Extensions'
 * // ]
 * ```
 *
 * @category ActivityBar
 */
export let ViewControl = class ViewControl extends ElementWithContextMenu {
    constructor(locators, element, bar) {
        super(locators, element, bar.elem);
        this.bar = bar;
        /**
         * @private
         */
        this.locatorKey = 'ViewControl';
    }
    /**
     * Opens the associated view if not already open
     * @returns Promise resolving to SideBarView object representing the opened view
     */
    async openView() {
        const klass = await this.elem.getAttribute(this.locators.attribute);
        if (klass.indexOf(this.locators.klass) < 0) {
            await this.elem.click();
            // eslint-disable-next-line wdio/no-pause
            await browser.pause(500);
        }
        const view = await new SideBarView(this.locatorMap).wait();
        if ((await view.elem.$$(this.locators.scmId)).length > 0) {
            if (await browser.getVSCodeChannel() === 'vscode' && await browser.getVSCodeVersion() >= '1.47.0') {
                return new NewScmView(this.locatorMap).wait();
            }
            return new ScmView(this.locatorMap).wait();
        }
        if ((await view.elem.$$(this.locators.debugId)).length > 0) {
            return new DebugView(this.locatorMap).wait();
        }
        return view;
    }
    /**
     * Closes the associated view if not already closed
     * @returns Promise resolving when the view closes
     */
    async closeView() {
        const klass = await this.elem.getAttribute(this.locators.attribute);
        if (klass.indexOf(this.locators.klass) > -1) {
            await this.elem.click();
        }
    }
    /**
     * Returns the title of the associated view
     * @param includeKeyboardShortcuts if true it includes the keyboard shortcut
     *                                 in the title (e.g. "Source Control (Ctrl+Shift+G)")
     */
    async getTitle(includeKeyboardShortcuts = false) {
        const title = await this.badge$.getAttribute('aria-label');
        if (!includeKeyboardShortcuts) {
            /**
             * first strip out possible pending annotation, e.g.
             * "Source Control (⌃⇧G) - 8 pending
             */
            const [label] = title.split(' - ');
            /**
             * next, strip out possible keyboard shortcuts, e.g.
             * "Source Control (⌃⇧G)
             */
            return label.endsWith(')')
                ? label.split(' ').slice(0, -1).join(' ')
                : label;
        }
        return title;
    }
};
ViewControl = __decorate([
    PageDecorator(ViewControlLocators)
], ViewControl);
//# sourceMappingURL=data:application/json;base64,