import { DebugConsoleView, OutputView, TerminalView, ProblemsView } from '../index.js';
import { BasePage, IPageDecorator } from '../utils.js';
import { BottomBarPanel as BottomBarPanelLocators } from '../../locators/1.84.0.js';
export interface BottomBarPanel extends IPageDecorator<typeof BottomBarPanelLocators> {
}
/**
 * Page object for the bottom view panel
 *
 * ```ts
 * const bottomBar = workbench.getBottomBar()
 * await bottomBar.toggle(true)
 * ```
 *
 * @category BottomBar
 */
export declare class BottomBarPanel extends BasePage<typeof BottomBarPanelLocators> {
    /**
     * @private
     */
    locatorKey: "BottomBarPanel";
    /**
     * Open/Close the bottom bar panel
     * @param open true to open. false to close
     * @returns Promise resolving when the view visibility is toggled
     */
    toggle(open: boolean): Promise<void>;
    /**
     * Open the Problems view in the bottom panel
     * @returns Promise resolving to a ProblemsView object
     */
    openProblemsView(): Promise<ProblemsView>;
    /**
     * Open the Output view in the bottom panel
     * @returns Promise resolving to OutputView object
     */
    openOutputView(): Promise<OutputView>;
    /**
     * Open the Debug Console view in the bottom panel
     * @returns Promise resolving to DebugConsoleView object
     */
    openDebugConsoleView(): Promise<DebugConsoleView>;
    /**
     * Open the Terminal view in the bottom panel
     * @returns Promise resolving to TerminalView object
     */
    openTerminalView(): Promise<TerminalView>;
    /**
     * Maximize the the bottom panel if not maximized
     * @returns Promise resolving when the maximize button is pressed
     */
    maximize(): Promise<void>;
    /**
     * Restore the the bottom panel if maximized
     * @returns Promise resolving when the restore button is pressed
     */
    restore(): Promise<void>;
    private openTab;
    private resize;
}
//# sourceMappingURL=BottomBarPanel.d.ts.map