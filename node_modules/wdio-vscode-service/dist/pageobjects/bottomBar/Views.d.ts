import { BottomBarPanel, ContentAssist } from '../../index.js';
import { TextView, ChannelView } from './AbstractViews.js';
import { ElementWithContextMenu, IPageDecorator, VSCodeLocatorMap } from '../utils.js';
import { OutputView as OutputViewLocators, DebugConsoleView as DebugConsoleViewLocators, TerminalView as TerminalViewLocators } from '../../locators/1.73.0.js';
export interface OutputView extends IPageDecorator<typeof OutputViewLocators> {
}
/**
 * Output view of the bottom panel
 *
 * ```ts
 * const bottomBar = workbench.getBottomBar()
 * const outputView = await bottomBar.openOutputView()
 * console.log(await outputView.getChannelNames())
 * // returns
 * // [
 * //   'Tasks',
 * //   'Extensions',
 * //   'Microsoft Authentication',
 * //   'Git',
 * //   'GitHub Authentication',
 * //   'Log (Window)',
 * //   'Log (Main)',
 * //   'Log (Extension Host)',
 * //   'Log (Settings Sync)',
 * //   'Log (Shared)'
 * // ]
 * ```
 *
 * @category BottomBar
 */
export declare class OutputView extends TextView<typeof OutputViewLocators> {
    panel: BottomBarPanel;
    /**
     * @private
     */
    locatorKey: "OutputView";
    constructor(locators: VSCodeLocatorMap, panel?: BottomBarPanel);
}
export interface DebugConsoleView extends IPageDecorator<typeof DebugConsoleViewLocators> {
}
/**
 * Debug Console view on the bottom panel
 * Most functionality will only be available when a debug session is running
 *
 * @category BottomBar
 */
export declare class DebugConsoleView extends ElementWithContextMenu<typeof DebugConsoleViewLocators> {
    panel: BottomBarPanel;
    /**
     * @private
     */
    locatorKey: "DebugConsoleView";
    constructor(locators: VSCodeLocatorMap, panel?: BottomBarPanel);
    /**
     * Get all text from the debug console
     */
    getText(): Promise<string>;
    /**
     * Clear the console of all text
     */
    clearText(): Promise<void>;
    /**
     * Type an expression into the debug console text area
     * @param expression expression in form of a string
     */
    setExpression(expression: string): Promise<void>;
    /**
     * Evaluate an expression:
     *  - if no argument is supplied, evaluate the current expression present in debug console text area
     *  - if a string argument is supplied, replace the current expression with the `expression` argument and evaluate
     *
     * @param expression expression to evaluate. To use existing contents of the debug console
     *                   text area instead, don't define this argument
     */
    evaluateExpression(expression?: string): Promise<void>;
    /**
     * Create a content assist page object
     * @returns promise resolving to ContentAssist object
     */
    getContentAssist(): Promise<ContentAssist>;
}
export interface TerminalView extends IPageDecorator<typeof TerminalViewLocators> {
}
/**
 * Terminal view on the bottom panel
 *
 * @category BottomBar
 */
export declare class TerminalView extends ChannelView<typeof TerminalViewLocators> {
    panel: BottomBarPanel;
    /**
     * @private
     */
    locatorKey: "TerminalView";
    constructor(locators: VSCodeLocatorMap, panel?: BottomBarPanel);
    /**
     * Execute command in the internal terminal and wait for results
     * @param command text of the command
     * @param timeout optional maximum time to wait for completion in milliseconds, 0 for unlimited
     * @returns Promise resolving when the command is finished
     */
    executeCommand(command: string, timeout?: number): Promise<void>;
    /**
     * Get all text from the internal terminal
     * Beware, no formatting.
     * @returns Promise resolving to all terminal text
     */
    getText(retry?: number): Promise<string>;
    /**
     * Destroy the currently open terminal
     * @returns Promise resolving when Kill Terminal button is pressed
     */
    killTerminal(): Promise<void>;
    /**
     * Initiate new terminal creation
     * @returns Promise resolving when New Terminal button is pressed
     */
    newTerminal(): Promise<void>;
    getCurrentChannel(): Promise<string>;
    selectChannel(name: string): Promise<void>;
}
//# sourceMappingURL=Views.d.ts.map