var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Editor } from './Editor.js';
import { TextEditor } from './TextEditor.js';
import { EditorView } from './EditorView.js';
import { PageDecorator } from '../utils.js';
import { DiffEditor as DiffEditorLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing a diff editor
 *
 * @category Editor
 */
export let DiffEditor = class DiffEditor extends Editor {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DiffEditor';
    }
    /**
     * Gets the text editor corresponding to the originalside.
     * (The left side of the diff editor)
     * @returns Promise resolving to TextEditor object
     */
    getOriginalEditor() {
        const element = this.view.elem.$(this.locators.originalEditor);
        return new TextEditor(this.locatorMap, element, new EditorView(this.locatorMap)).wait();
    }
    /**
     * Gets the text editor corresponding to the modified side.
     * (The right side of the diff editor)
     * @returns Promise resolving to TextEditor object
     */
    async getModifiedEditor() {
        const element = this.view.elem.$(this.locators.modifiedEditor);
        return new TextEditor(this.locatorMap, element, new EditorView(this.locatorMap)).wait();
    }
};
DiffEditor = __decorate([
    PageDecorator(DiffEditorLocators)
], DiffEditor);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlmZkVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9lZGl0b3IvRGlmZkVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFrQixNQUFNLGFBQWEsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzVDLE9BQU8sRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQzNELE9BQU8sRUFBRSxVQUFVLElBQUksa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUczRTs7OztHQUlHO0FBRUksV0FBTSxVQUFVLEdBQWhCLE1BQU0sVUFBVyxTQUFRLE1BQXNCO0lBQS9DOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUE2QjdDLENBQUM7SUEzQkc7Ozs7T0FJRztJQUNILGlCQUFpQjtRQUNiLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQzlELE9BQU8sSUFBSSxVQUFVLENBQ2pCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxFQUNQLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDbEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNaLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGlCQUFpQjtRQUNuQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUM5RCxPQUFPLElBQUksVUFBVSxDQUNqQixJQUFJLENBQUMsVUFBVSxFQUNmLE9BQU8sRUFDUCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQ2xDLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDWixDQUFDO0NBQ0osQ0FBQTtBQWpDWSxVQUFVO0lBRHRCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztHQUNyQixVQUFVLENBaUN0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvciwgRWRpdG9yTG9jYXRvcnMgfSBmcm9tICcuL0VkaXRvci5qcydcbmltcG9ydCB7IFRleHRFZGl0b3IgfSBmcm9tICcuL1RleHRFZGl0b3IuanMnXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAnLi9FZGl0b3JWaWV3LmpzJ1xuaW1wb3J0IHsgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IgfSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IERpZmZFZGl0b3IgYXMgRGlmZkVkaXRvckxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIERpZmZFZGl0b3IgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxFZGl0b3JMb2NhdG9ycz4ge31cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIGEgZGlmZiBlZGl0b3JcbiAqXG4gKiBAY2F0ZWdvcnkgRWRpdG9yXG4gKi9cbkBQYWdlRGVjb3JhdG9yKERpZmZFZGl0b3JMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBEaWZmRWRpdG9yIGV4dGVuZHMgRWRpdG9yPEVkaXRvckxvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdEaWZmRWRpdG9yJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGV4dCBlZGl0b3IgY29ycmVzcG9uZGluZyB0byB0aGUgb3JpZ2luYWxzaWRlLlxuICAgICAqIChUaGUgbGVmdCBzaWRlIG9mIHRoZSBkaWZmIGVkaXRvcilcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBUZXh0RWRpdG9yIG9iamVjdFxuICAgICAqL1xuICAgIGdldE9yaWdpbmFsRWRpdG9yICgpOiBQcm9taXNlPFRleHRFZGl0b3I+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudmlldy5lbGVtLiQodGhpcy5sb2NhdG9ycy5vcmlnaW5hbEVkaXRvcilcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RWRpdG9yKFxuICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIG5ldyBFZGl0b3JWaWV3KHRoaXMubG9jYXRvck1hcClcbiAgICAgICAgKS53YWl0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0ZXh0IGVkaXRvciBjb3JyZXNwb25kaW5nIHRvIHRoZSBtb2RpZmllZCBzaWRlLlxuICAgICAqIChUaGUgcmlnaHQgc2lkZSBvZiB0aGUgZGlmZiBlZGl0b3IpXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gVGV4dEVkaXRvciBvYmplY3RcbiAgICAgKi9cbiAgICBhc3luYyBnZXRNb2RpZmllZEVkaXRvciAoKTogUHJvbWlzZTxUZXh0RWRpdG9yPiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnZpZXcuZWxlbS4kKHRoaXMubG9jYXRvcnMubW9kaWZpZWRFZGl0b3IpXG4gICAgICAgIHJldHVybiBuZXcgVGV4dEVkaXRvcihcbiAgICAgICAgICAgIHRoaXMubG9jYXRvck1hcCxcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBuZXcgRWRpdG9yVmlldyh0aGlzLmxvY2F0b3JNYXApXG4gICAgICAgICkud2FpdCgpXG4gICAgfVxufVxuIl19