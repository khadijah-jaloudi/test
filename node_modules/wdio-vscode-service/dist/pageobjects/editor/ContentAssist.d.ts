import { ChainablePromiseElement } from 'webdriverio';
import { TextEditor, Menu, MenuItem, DebugConsoleView } from '../index.js';
import { IPageDecorator, VSCodeLocatorMap } from '../utils.js';
import { ContentAssist as ContentAssistLocators } from '../../locators/1.73.0.js';
export interface ContentAssist extends IPageDecorator<typeof ContentAssistLocators> {
}
/**
 * Page object representing the content assistant
 *
 * @category Editor
 */
export declare class ContentAssist extends Menu<typeof ContentAssistLocators> {
    /**
     * @private
     */
    locatorKey: "ContentAssist";
    constructor(locators: VSCodeLocatorMap, parent: TextEditor | DebugConsoleView);
    /**
     * Get content assist item by name/text, scroll through the list
     * until the item is found, or the end is reached
     *
     * @param name name/text to search by
     * @returns Promise resolving to ContentAssistItem object if found, undefined otherwise
     */
    getItem(name: string): Promise<ContentAssistItem | undefined>;
    /**
     * Get all visible content assist items
     * @returns Promise resolving to array of ContentAssistItem objects
     */
    getItems(): Promise<ContentAssistItem[]>;
    /**
     * Find if the content assist is still loading the suggestions
     * @returns promise that resolves to true when suggestions are done loading,
     * to false otherwise
     */
    isLoaded(): Promise<boolean>;
}
export interface ContentAssistItem extends IPageDecorator<typeof ContentAssistLocators> {
}
/**
 * Page object for a content assist item
 *
 * @category Editor
 */
export declare class ContentAssistItem extends MenuItem<typeof ContentAssistLocators> {
    /**
     * @private
     */
    locatorKey: "ContentAssist";
    parentMenu: ContentAssist;
    label: string;
    constructor(locators: VSCodeLocatorMap, item: string | ChainablePromiseElement<WebdriverIO.Element>, contentAssist: ContentAssist);
    getLabel(): Promise<string>;
}
//# sourceMappingURL=ContentAssist.d.ts.map