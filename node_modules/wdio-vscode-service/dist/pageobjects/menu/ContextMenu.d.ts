import type { ChainablePromiseElement } from 'webdriverio';
import { Menu, MenuItem } from '../index.js';
import { IPageDecorator, VSCodeLocatorMap } from '../utils.js';
import { ContextMenu as ContextMenuLocators } from '../../locators/1.73.0.js';
export interface ContextMenu extends IPageDecorator<typeof ContextMenuLocators> {
}
/**
 * Object representing a context menu
 *
 * @category Menu
 */
export declare class ContextMenu extends Menu<typeof ContextMenuLocators> {
    /**
     * @private
     */
    locatorKey: "ContextMenu";
    /**
     * Get context menu item by name
     * @param name name of the item to search by
     * @returns Promise resolving to ContextMenuItem object
     */
    getItem(name: string): Promise<MenuItem<typeof ContextMenuLocators> | undefined>;
    /**
     * Get all context menu items
     * @returns Promise resolving to array of ContextMenuItem objects
     */
    getItems(): Promise<ContextMenuItem[]>;
    /**
     * Close the context menu
     * @returns Promise resolving when the menu is closed
     */
    close(): Promise<void>;
    /**
     * Wait for the menu to appear and load all its items
     */
    wait(timeout?: number): Promise<this>;
}
export interface ContextMenuItem extends IPageDecorator<typeof ContextMenuLocators> {
}
/**
 * Object representing an item of a context menu
 *
 * @category Menu
 */
export declare class ContextMenuItem extends MenuItem<typeof ContextMenuLocators> {
    parentMenu: Menu<typeof ContextMenuLocators>;
    /**
     * @private
     */
    locatorKey: "ContextMenu";
    label: string;
    constructor(locators: VSCodeLocatorMap, base: ChainablePromiseElement<WebdriverIO.Element>, parentMenu: Menu<typeof ContextMenuLocators>);
    select(): Promise<ContextMenu | undefined>;
    getLabel(): Promise<string>;
    private isNesting;
}
//# sourceMappingURL=ContextMenu.d.ts.map