import { BasePage } from '../utils.js';
/**
 * Abstract element representing a menu
 *
 * @category Menu
 */
export class Menu extends BasePage {
    /**
     * Find whether the menu has an item of a given name
     * @param name name of the item to search for
     * @returns true if menu has an item with the given name, false otherwise
     */
    async hasItem(name) {
        const item = await this.getItem(name);
        return Boolean(item?.elem.isDisplayed());
    }
    /**
     * Recursively select an item with a given path.
     *
     * E.g. calling select('File', 'Preferences', 'Settings') will
     * open the 'File' -> 'Preferences' submenus and then click on 'Settings'.
     *
     * Selection happens in order of the arguments, if one of the items in the middle
     * of the path has no children, the consequent path arguments will be ignored.
     *
     *
     * @param path path to the item to select, represented by a sequence of strings
     * @returns void if the last clicked item is a leaf, Menu item representing
     * its submenu otherwise
     */
    async select(...path) {
        let parent = this;
        for (const label of path) {
            const item = await parent.getItem(label);
            if (!item)
                return parent;
            await browser.waitUntil(async () => await item.elem.isDisplayed() && await item.elem.isEnabled());
            const submenu = await item.select();
            if (submenu) {
                parent = submenu;
            }
            else {
                return undefined;
            }
        }
        return parent;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9tZW51L01lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUd0Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFnQixJQUFRLFNBQVEsUUFBVztJQUM3Qzs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFZO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNyQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQWNEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFFLEdBQUcsSUFBYztRQUMzQixJQUFJLE1BQU0sR0FBWSxJQUFJLENBQUE7UUFDMUIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3hDLElBQUksQ0FBQyxJQUFJO2dCQUFFLE9BQU8sTUFBTSxDQUFBO1lBQ3hCLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtZQUNqRyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUNuQyxJQUFJLE9BQU8sRUFBRTtnQkFDVCxNQUFNLEdBQUcsT0FBTyxDQUFBO2FBQ25CO2lCQUFNO2dCQUNILE9BQU8sU0FBUyxDQUFBO2FBQ25CO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUGFnZSB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHR5cGUgeyBNZW51SXRlbSB9IGZyb20gJy4uL2luZGV4LmpzJ1xuXG4vKipcbiAqIEFic3RyYWN0IGVsZW1lbnQgcmVwcmVzZW50aW5nIGEgbWVudVxuICpcbiAqIEBjYXRlZ29yeSBNZW51XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNZW51PFQ+IGV4dGVuZHMgQmFzZVBhZ2U8VD4ge1xuICAgIC8qKlxuICAgICAqIEZpbmQgd2hldGhlciB0aGUgbWVudSBoYXMgYW4gaXRlbSBvZiBhIGdpdmVuIG5hbWVcbiAgICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBpdGVtIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIG1lbnUgaGFzIGFuIGl0ZW0gd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgYXN5bmMgaGFzSXRlbSAobmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCB0aGlzLmdldEl0ZW0obmFtZSlcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oaXRlbT8uZWxlbS5pc0Rpc3BsYXllZCgpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIG1lbnUgaXRlbSBvZiBhIGdpdmVuIG5hbWUsIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAgICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBpdGVtIHRvIHNlYXJjaCBmb3JcbiAgICAgKi9cbiAgICBhYnN0cmFjdCBnZXRJdGVtIChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPE1lbnVJdGVtPFQ+IHwgdW5kZWZpbmVkPlxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBpdGVtcyBvZiBhIG1lbnVcbiAgICAgKiBAcmV0dXJucyBhcnJheSBvZiBNZW51SXRlbSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBtZW51IGl0ZW1zXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0SXRlbXMgKCk6IFByb21pc2U8TWVudUl0ZW08VD5bXT5cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IHNlbGVjdCBhbiBpdGVtIHdpdGggYSBnaXZlbiBwYXRoLlxuICAgICAqXG4gICAgICogRS5nLiBjYWxsaW5nIHNlbGVjdCgnRmlsZScsICdQcmVmZXJlbmNlcycsICdTZXR0aW5ncycpIHdpbGxcbiAgICAgKiBvcGVuIHRoZSAnRmlsZScgLT4gJ1ByZWZlcmVuY2VzJyBzdWJtZW51cyBhbmQgdGhlbiBjbGljayBvbiAnU2V0dGluZ3MnLlxuICAgICAqXG4gICAgICogU2VsZWN0aW9uIGhhcHBlbnMgaW4gb3JkZXIgb2YgdGhlIGFyZ3VtZW50cywgaWYgb25lIG9mIHRoZSBpdGVtcyBpbiB0aGUgbWlkZGxlXG4gICAgICogb2YgdGhlIHBhdGggaGFzIG5vIGNoaWxkcmVuLCB0aGUgY29uc2VxdWVudCBwYXRoIGFyZ3VtZW50cyB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIHBhdGggdG8gdGhlIGl0ZW0gdG8gc2VsZWN0LCByZXByZXNlbnRlZCBieSBhIHNlcXVlbmNlIG9mIHN0cmluZ3NcbiAgICAgKiBAcmV0dXJucyB2b2lkIGlmIHRoZSBsYXN0IGNsaWNrZWQgaXRlbSBpcyBhIGxlYWYsIE1lbnUgaXRlbSByZXByZXNlbnRpbmdcbiAgICAgKiBpdHMgc3VibWVudSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBhc3luYyBzZWxlY3QgKC4uLnBhdGg6IHN0cmluZ1tdKTogUHJvbWlzZTxNZW51PFQ+IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGxldCBwYXJlbnQ6IE1lbnU8VD4gPSB0aGlzXG4gICAgICAgIGZvciAoY29uc3QgbGFiZWwgb2YgcGF0aCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGF3YWl0IHBhcmVudC5nZXRJdGVtKGxhYmVsKVxuICAgICAgICAgICAgaWYgKCFpdGVtKSByZXR1cm4gcGFyZW50XG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLndhaXRVbnRpbChhc3luYyAoKSA9PiBhd2FpdCBpdGVtLmVsZW0uaXNEaXNwbGF5ZWQoKSAmJiBhd2FpdCBpdGVtLmVsZW0uaXNFbmFibGVkKCkpXG4gICAgICAgICAgICBjb25zdCBzdWJtZW51ID0gYXdhaXQgaXRlbS5zZWxlY3QoKVxuICAgICAgICAgICAgaWYgKHN1Ym1lbnUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBzdWJtZW51XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50XG4gICAgfVxufVxuIl19