var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ViewItem } from '../ViewItem.js';
import { PageDecorator } from '../../utils.js';
import { TreeItem as TreeItemLocators, ExtensionsViewItem as ExtensionsViewItemLocators } from '../../../locators/1.73.0.js';
/**
 * Page object representing an extension in the extensions view
 *
 * @category Sidebar
 */
export let ExtensionsViewItem = class ExtensionsViewItem extends ViewItem {
    constructor(locators, extensionElement, section) {
        super(locators, extensionElement, section.elem);
        this.section = section;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'ExtensionsViewItem'];
    }
    /**
     * Get title of the extension
     */
    async getTitle() {
        return this.itemTitle$.getText();
    }
    /**
     * Get version of the extension
     * @returns Promise resolving to version string
     */
    async getVersion() {
        const version = await this.version$$;
        if (version.length > 0) {
            return version[0].getText();
        }
        const label = await this.elem.getAttribute('aria-label');
        const ver = label.split(',')[1].trim();
        return ver;
    }
    /**
     * Get the author of the extension
     * @returns Promise resolving to displayed author
     */
    async getAuthor() {
        const author = await this.author$;
        return author.getText();
    }
    /**
     * Get the description of the extension
     * @returns Promise resolving to description
     */
    async getDescription() {
        return this.description$.getText();
    }
    /**
     * Find if the extension is installed
     * @returns Promise resolving to true/false
     */
    async isInstalled() {
        if ((await this.install$.getAttribute('class')).indexOf('disabled') > -1) {
            return true;
        }
        return false;
    }
    /**
     * Open the management context menu if the extension is installed
     * @returns Promise resolving to ContextMenu object
     */
    async manage() {
        if ((await this.manage$.getAttribute('class')).indexOf('disabled') > -1) {
            throw new Error(`Extension '${await this.getTitle()}' is not installed`);
        }
        return this.openContextMenu();
    }
    /**
     * Install the extension if not installed already.
     *
     * Will wait for the extension to finish installing. To skip the wait, set timeout to 0.
     *
     * @param timeout timeout to wait for the installation in milliseconds, default unlimited, set to 0 to skip waiting
     * @returns Promise resolving when the installation finishes or is skipped
     */
    async install(timeout = 300000) {
        if (await this.isInstalled()) {
            return;
        }
        const button = await this.install$;
        await button.click();
        if (timeout > 0) {
            await this.manage$.waitForDisplayed({ timeout });
        }
    }
};
ExtensionsViewItem = __decorate([
    PageDecorator({ ...TreeItemLocators, ...ExtensionsViewItemLocators })
], ExtensionsViewItem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uc1ZpZXdJdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvZXh0ZW5zaW9ucy9FeHRlbnNpb25zVmlld0l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQTtBQUkzRCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLGdCQUFnQixDQUFBO0FBQ2hGLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGtCQUFrQixJQUFJLDBCQUEwQixFQUNuRCxNQUFNLDZCQUE2QixDQUFBO0FBR3BDOzs7O0dBSUc7QUFFSSxXQUFNLGtCQUFrQixHQUF4QixNQUFNLGtCQUFtQixTQUFRLFFBQVE7SUFNNUMsWUFDSSxRQUEwQixFQUMxQixnQkFBOEQsRUFDdkQsT0FBOEI7UUFFckMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFGeEMsWUFBTyxHQUFQLE9BQU8sQ0FBdUI7UUFSekM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsQ0FBQyxVQUFtQixFQUFFLG9CQUE2QixDQUFDLENBQUE7SUFReEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ3BDLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7U0FDOUI7UUFDRCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3hELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFdEMsT0FBTyxHQUFHLENBQUE7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFNBQVM7UUFDWCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFdBQVc7UUFDYixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN0RSxPQUFPLElBQUksQ0FBQTtTQUNkO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxNQUFNO1FBQ1IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDckUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO1NBQzNFO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDakMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFFLE9BQU8sR0FBRyxNQUFNO1FBQzNCLElBQUksTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDMUIsT0FBTTtTQUNUO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQ2xDLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBRXBCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNiLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDbkQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQTlGWSxrQkFBa0I7SUFEOUIsYUFBYSxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLDBCQUEwQixFQUFFLENBQUM7R0FDekQsa0JBQWtCLENBOEY5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHsgVmlld0l0ZW0sIFZpZXdJdGVtTG9jYXRvcnMgfSBmcm9tICcuLi9WaWV3SXRlbS5qcydcbmltcG9ydCB7IENvbnRleHRNZW51IH0gZnJvbSAnLi4vLi4vbWVudS9Db250ZXh0TWVudS5qcydcbmltcG9ydCB7IEV4dGVuc2lvbnNWaWV3U2VjdGlvbiB9IGZyb20gJy4vRXh0ZW5zaW9uc1ZpZXdTZWN0aW9uLmpzJ1xuXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciwgVlNDb2RlTG9jYXRvck1hcCB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBUcmVlSXRlbSBhcyBUcmVlSXRlbUxvY2F0b3JzLFxuICAgIEV4dGVuc2lvbnNWaWV3SXRlbSBhcyBFeHRlbnNpb25zVmlld0l0ZW1Mb2NhdG9yc1xufSBmcm9tICcuLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5zaW9uc1ZpZXdJdGVtIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8Vmlld0l0ZW1Mb2NhdG9ycz4geyB9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyBhbiBleHRlbnNpb24gaW4gdGhlIGV4dGVuc2lvbnMgdmlld1xuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKHsgLi4uVHJlZUl0ZW1Mb2NhdG9ycywgLi4uRXh0ZW5zaW9uc1ZpZXdJdGVtTG9jYXRvcnMgfSlcbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25zVmlld0l0ZW0gZXh0ZW5kcyBWaWV3SXRlbSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9IFsnVHJlZUl0ZW0nIGFzIGNvbnN0LCAnRXh0ZW5zaW9uc1ZpZXdJdGVtJyBhcyBjb25zdF1cblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIGV4dGVuc2lvbkVsZW1lbnQ6IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+LFxuICAgICAgICBwdWJsaWMgc2VjdGlvbjogRXh0ZW5zaW9uc1ZpZXdTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBleHRlbnNpb25FbGVtZW50LCBzZWN0aW9uLmVsZW0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRpdGxlIG9mIHRoZSBleHRlbnNpb25cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUaXRsZSAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbVRpdGxlJC5nZXRUZXh0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdmVyc2lvbiBvZiB0aGUgZXh0ZW5zaW9uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdmVyc2lvbiBzdHJpbmdcbiAgICAgKi9cbiAgICBhc3luYyBnZXRWZXJzaW9uICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gYXdhaXQgdGhpcy52ZXJzaW9uJCRcbiAgICAgICAgaWYgKHZlcnNpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb25bMF0uZ2V0VGV4dCgpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWwgPSBhd2FpdCB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJylcbiAgICAgICAgY29uc3QgdmVyID0gbGFiZWwuc3BsaXQoJywnKVsxXS50cmltKClcblxuICAgICAgICByZXR1cm4gdmVyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhdXRob3Igb2YgdGhlIGV4dGVuc2lvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGRpc3BsYXllZCBhdXRob3JcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBdXRob3IgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IHRoaXMuYXV0aG9yJFxuICAgICAgICByZXR1cm4gYXV0aG9yLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGV4dGVuc2lvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RGVzY3JpcHRpb24gKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uJC5nZXRUZXh0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGlmIHRoZSBleHRlbnNpb24gaXMgaW5zdGFsbGVkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdHJ1ZS9mYWxzZVxuICAgICAqL1xuICAgIGFzeW5jIGlzSW5zdGFsbGVkICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKChhd2FpdCB0aGlzLmluc3RhbGwkLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuaW5kZXhPZignZGlzYWJsZWQnKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIG1hbmFnZW1lbnQgY29udGV4dCBtZW51IGlmIHRoZSBleHRlbnNpb24gaXMgaW5zdGFsbGVkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gQ29udGV4dE1lbnUgb2JqZWN0XG4gICAgICovXG4gICAgYXN5bmMgbWFuYWdlICgpOiBQcm9taXNlPENvbnRleHRNZW51PiB7XG4gICAgICAgIGlmICgoYXdhaXQgdGhpcy5tYW5hZ2UkLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuaW5kZXhPZignZGlzYWJsZWQnKSA+IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4dGVuc2lvbiAnJHthd2FpdCB0aGlzLmdldFRpdGxlKCl9JyBpcyBub3QgaW5zdGFsbGVkYClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vcGVuQ29udGV4dE1lbnUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc3RhbGwgdGhlIGV4dGVuc2lvbiBpZiBub3QgaW5zdGFsbGVkIGFscmVhZHkuXG4gICAgICpcbiAgICAgKiBXaWxsIHdhaXQgZm9yIHRoZSBleHRlbnNpb24gdG8gZmluaXNoIGluc3RhbGxpbmcuIFRvIHNraXAgdGhlIHdhaXQsIHNldCB0aW1lb3V0IHRvIDAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGltZW91dCB0aW1lb3V0IHRvIHdhaXQgZm9yIHRoZSBpbnN0YWxsYXRpb24gaW4gbWlsbGlzZWNvbmRzLCBkZWZhdWx0IHVubGltaXRlZCwgc2V0IHRvIDAgdG8gc2tpcCB3YWl0aW5nXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgaW5zdGFsbGF0aW9uIGZpbmlzaGVzIG9yIGlzIHNraXBwZWRcbiAgICAgKi9cbiAgICBhc3luYyBpbnN0YWxsICh0aW1lb3V0ID0gMzAwMDAwKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmlzSW5zdGFsbGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGF3YWl0IHRoaXMuaW5zdGFsbCRcbiAgICAgICAgYXdhaXQgYnV0dG9uLmNsaWNrKClcblxuICAgICAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFuYWdlJC53YWl0Rm9yRGlzcGxheWVkKHsgdGltZW91dCB9KVxuICAgICAgICB9XG4gICAgfVxufVxuIl19