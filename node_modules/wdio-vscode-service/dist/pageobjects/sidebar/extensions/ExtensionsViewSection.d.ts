import { ViewSection } from '../ViewSection.js';
import { ExtensionsViewItem, AllViewSectionLocators } from '../../index.js';
import { IPageDecorator } from '../../utils.js';
export interface ExtensionsViewSection extends IPageDecorator<AllViewSectionLocators> {
}
/**
 * View section containing extensions
 *
 * @category Sidebar
 */
export declare class ExtensionsViewSection extends ViewSection {
    /**
     * @private
     */
    locatorKey: ("ViewSection" | "ExtensionsViewSection")[];
    getVisibleItems(): Promise<ExtensionsViewItem[]>;
    /**
     * Search for an extension by title. This utilizes the search bar
     * in the Extensions view, which switches the perspective to the
     * section representing the chosen category and temporarily hides all other sections.
     * If you wish to continue working with the initial view section
     * (i.e. Enabled), use the clearSearch method to reset it back to default
     *
     * @param title title to search for in '@category name' format,
     * e.g '@installed extension'. If no @category is present, marketplace will be searched
     *
     * @returns Promise resolving to ExtensionsViewItem if such item exists, undefined otherwise
     */
    findItem(title: string): Promise<ExtensionsViewItem | undefined>;
    /**
     * Clears the search bar on top of the view
     * @returns Promise resolving when the search box is cleared
     */
    clearSearch(): Promise<void>;
    /**
     * Find and open an extension item
     * @param title title of the extension
     * @returns Promise resolving when the item is clicked
     */
    openItem(title: string): Promise<never[]>;
    private getSectionForCategory;
}
//# sourceMappingURL=ExtensionsViewSection.d.ts.map