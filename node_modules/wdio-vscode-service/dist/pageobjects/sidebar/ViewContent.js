var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { SideBarView } from '../index.js';
import { DefaultTreeSection } from './tree/default/DefaultTreeSection.js';
import { CustomTreeSection } from './tree/custom/CustomTreeSection.js';
import { ExtensionsViewSection } from './extensions/ExtensionsViewSection.js';
import { PageDecorator, BasePage } from '../utils.js';
import { ViewContent as ViewContentLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the view container of a side bar view
 *
 * @category Sidebar
 */
export let ViewContent = class ViewContent extends BasePage {
    constructor(locators, view = new SideBarView(locators)) {
        super(locators, view.elem);
        this.view = view;
        /**
         * @private
         */
        this.locatorKey = 'ViewContent';
    }
    /**
     * Finds whether a progress bar is active at the top of the view
     * @returns Promise resolving to true/false
     */
    async hasProgress() {
        const hidden = await this.progress$.getAttribute('aria-hidden');
        if (hidden === 'true') {
            return false;
        }
        return true;
    }
    /**
     * Retrieves a collapsible view content section by its title
     * @param title Title of the section
     * @returns Promise resolving to ViewSection object
     */
    async getSection(title) {
        const elements = await this.section$$;
        let panel;
        const availableSections = new Set();
        for (const element of elements) {
            const sectionTitle = await element.$(this.locators.sectionTitle).getText();
            availableSections.add(sectionTitle);
            if (sectionTitle === title) {
                panel = element;
                break;
            }
        }
        if (!panel) {
            throw new Error(`No section with title '${title}' found, `
                + `available are: ${[...availableSections].join(', ')}`);
        }
        return this.createSection(panel);
    }
    /**
     * Retrieves all the collapsible view content sections
     * @returns Promise resolving to array of ViewSection objects
     */
    async getSections() {
        const sections = [];
        const elements = await this.section$$;
        for (const element of elements) {
            const section = await this.createSection(element);
            sections.push(await section.wait());
        }
        return sections;
    }
    async createSection(panel) {
        const section = new DefaultTreeSection(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        panel, this);
        if (await section.elem.$(this.locators.defaultView).isExisting()) {
            return section;
        }
        if (await section.elem.$(this.locators.extensionsView).isExisting()) {
            return new ExtensionsViewSection(this.locatorMap, 
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            panel, this);
        }
        return new CustomTreeSection(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        panel, this);
    }
};
ViewContent = __decorate([
    PageDecorator(ViewContentLocators)
], ViewContent);
//# sourceMappingURL=data:application/json;base64,