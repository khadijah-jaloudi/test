var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ContextMenu, WelcomeContentSection } from '../index.js';
import { PageDecorator, BasePage, ElementWithContextMenu } from '../utils.js';
import { ViewSection as ViewSectionLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing a collapsible content section of the side bar view
 *
 * @category Sidebar
 */
export class ViewSection extends BasePage {
    constructor(locators, panel, content) {
        super(locators, panel);
        this.content = content;
    }
    /**
     * Get the title of the section as string
     * @returns Promise resolving to section title
     */
    async getTitle() {
        return this.title$.getAttribute(this.locators.titleText);
    }
    /**
     * Expand the section if collapsed
     * @returns Promise resolving when the section is expanded
     */
    async expand() {
        if (await this.isHeaderHidden()) {
            return;
        }
        if (!await this.isExpanded()) {
            const panel = await this.header$;
            await panel.click();
            await browser.waitUntil(async () => (await panel.getAttribute(this.locators.headerExpanded) === 'true'), { timeout: 1000 });
        }
    }
    /**
     * Collapse the section if expanded
     * @returns Promise resolving when the section is collapsed
     */
    async collapse() {
        if (await this.isHeaderHidden()) {
            return;
        }
        if (await this.isExpanded()) {
            const panel = await this.header$;
            await panel.click();
            await browser.waitUntil(async () => (await panel.getAttribute(this.locators.headerExpanded) === 'false'), { timeout: 1000 });
        }
    }
    /**
     * Finds whether the section is expanded
     * @returns Promise resolving to true/false
     */
    async isExpanded() {
        const expanded = await this.header$.getAttribute(this.locators.headerExpanded);
        return expanded === 'true';
    }
    /**
     * Finds [Welcome Content](https://code.visualstudio.com/api/extension-guides/tree-view#welcome-content)
     * present in this ViewSection and returns it. If none is found, then `undefined` is returned
     *
     */
    async findWelcomeContent() {
        try {
            const res = await this.welcomeContent$;
            if (!await res.isDisplayed()) {
                return undefined;
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            return new WelcomeContentSection(this.locatorMap, res, this);
        }
        catch (_err) {
            return undefined;
        }
    }
    /**
     * Retrieve the action buttons on the section's header
     * @returns Promise resolving to array of ViewPanelAction objects
     */
    async getActions() {
        const actions = [];
        if (!await this.isHeaderHidden()) {
            const elements = await this
                .header$
                .$(this.locators.actions)
                .$$(this.locators.button);
            for (const element of elements) {
                actions.push(await new ViewPanelAction(this.locatorMap, 
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                element, this).wait());
            }
        }
        return actions;
    }
    /**
     * Retrieve an action button on the sections's header by its label
     * @param label label/title of the button
     * @returns ViewPanelAction object if found, undefined otherwise
     */
    async getAction(label) {
        const actions = await this.getActions();
        for (const action of actions) {
            if (await action.getLabel() === label) {
                return action;
            }
        }
        return undefined;
    }
    /**
     * Click on the More Actions... item if it exists
     *
     * @returns ContextMenu page object if the action succeeds, undefined otherwise
     */
    async moreActions() {
        const more = await this.getAction('More Actions...');
        if (!more) {
            return undefined;
        }
        const section = this;
        const self = this;
        const btn = new class extends ElementWithContextMenu {
            constructor() {
                super(...arguments);
                this.locatorKey = 'ViewSection';
            }
            async openContextMenu() {
                await this.elem.click();
                const shadowRootHost = await section.elem.$$('.shadow-root-host');
                if (shadowRootHost.length > 0) {
                    const shadowRoot = $(await browser.execute('return arguments[0].shadowRoot', shadowRootHost[0]));
                    return new ContextMenu(self.locatorMap, shadowRoot).wait();
                }
                return super.openContextMenu();
            }
        }(this.locatorMap, more.elem, this.elem);
        return btn.openContextMenu();
    }
    async isHeaderHidden() {
        return (await this.header$.getAttribute('class')).indexOf('hidden') > -1;
    }
}
/**
 * Action button on the header of a view section
 *
 * @category Sidebar
 */
export let ViewPanelAction = class ViewPanelAction extends BasePage {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        /**
         * @private
         */
        this.locatorKey = 'ViewSection';
    }
    /**
     * Get label of the action button
     */
    async getLabel() {
        return this.elem.getAttribute(this.locators.buttonLabel);
    }
    async wait(timeout = 1000) {
        await this.elem.waitForEnabled({ timeout });
        return this;
    }
};
ViewPanelAction = __decorate([
    PageDecorator(ViewSectionLocators)
], ViewPanelAction);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld1NlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci9WaWV3U2VjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxPQUFPLEVBQ0gsV0FBVyxFQUF5QixxQkFBcUIsRUFDNUQsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUNILGFBQWEsRUFBa0IsUUFBUSxFQUFFLHNCQUFzQixFQUNsRSxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUlyQyxNQUFNLDBCQUEwQixDQUFBO0FBYWpDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQWdCLFdBQVksU0FBUSxRQUFnQztJQUN0RSxZQUNJLFFBQTBCLEVBQzFCLEtBQW1ELEVBQzVDLE9BQW9CO1FBRTNCLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFGZixZQUFPLEdBQVAsT0FBTyxDQUFhO0lBRy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLE1BQU07UUFDUixJQUFJLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQzdCLE9BQU07U0FDVDtRQUNELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUMxQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUE7WUFDaEMsTUFBTSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDbkIsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FDaEMsTUFBTSxLQUFLLENBQUMsWUFBWSxDQUFDLElB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QUFRLFFBQW9DO0lBTXJFLFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDckQsUUFBcUI7UUFFckIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBVjNDOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGFBQXNCLENBQUE7SUFRMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUUsT0FBTyxHQUFHLElBQUk7UUFDdEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDM0MsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0NBQ0osQ0FBQTtBQXpCWSxlQUFlO0lBRDNCLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztHQUN0QixlQUFlLENBeUIzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHtcbiAgICBDb250ZXh0TWVudSwgVmlld0NvbnRlbnQsIFZpZXdJdGVtLCBXZWxjb21lQ29udGVudFNlY3Rpb25cbn0gZnJvbSAnLi4vaW5kZXguanMnXG5pbXBvcnQge1xuICAgIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBCYXNlUGFnZSwgRWxlbWVudFdpdGhDb250ZXh0TWVudSwgVlNDb2RlTG9jYXRvck1hcFxufSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7XG4gICAgVmlld1NlY3Rpb24gYXMgVmlld1NlY3Rpb25Mb2NhdG9ycyxcbiAgICBFeHRlbnNpb25zVmlld1NlY3Rpb24gYXMgRXh0ZW5zaW9uc1ZpZXdTZWN0aW9uTG9jYXRvcnMsXG4gICAgQ3VzdG9tVHJlZVNlY3Rpb24gYXMgQ3VzdG9tVHJlZVNlY3Rpb25Mb2NhdG9ycyxcbiAgICBEZWZhdWx0VHJlZVNlY3Rpb24gYXMgRGVmYXVsdFRyZWVTZWN0aW9uTG9jYXRvcnNcbn0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgQWxsVmlld1NlY3Rpb25Mb2NhdG9ycyA9IChcbiAgICB0eXBlb2YgVmlld1NlY3Rpb25Mb2NhdG9ycyAmXG4gICAgdHlwZW9mIEV4dGVuc2lvbnNWaWV3U2VjdGlvbkxvY2F0b3JzICZcbiAgICB0eXBlb2YgQ3VzdG9tVHJlZVNlY3Rpb25Mb2NhdG9ycyAmXG4gICAgdHlwZW9mIERlZmF1bHRUcmVlU2VjdGlvbkxvY2F0b3JzXG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld1NlY3Rpb24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxBbGxWaWV3U2VjdGlvbkxvY2F0b3JzPiB7IH1cbi8qKlxuICogUGFnZSBvYmplY3QgcmVwcmVzZW50aW5nIGEgY29sbGFwc2libGUgY29udGVudCBzZWN0aW9uIG9mIHRoZSBzaWRlIGJhciB2aWV3XG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZpZXdTZWN0aW9uIGV4dGVuZHMgQmFzZVBhZ2U8QWxsVmlld1NlY3Rpb25Mb2NhdG9ycz4ge1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIHBhbmVsOiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIGNvbnRlbnQ6IFZpZXdDb250ZW50XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBwYW5lbClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRpdGxlIG9mIHRoZSBzZWN0aW9uIGFzIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHNlY3Rpb24gdGl0bGVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRUaXRsZSAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGl0bGUkLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLnRpdGxlVGV4dClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHBhbmQgdGhlIHNlY3Rpb24gaWYgY29sbGFwc2VkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgc2VjdGlvbiBpcyBleHBhbmRlZFxuICAgICAqL1xuICAgIGFzeW5jIGV4cGFuZCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmlzSGVhZGVySGlkZGVuKCkpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICghYXdhaXQgdGhpcy5pc0V4cGFuZGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gYXdhaXQgdGhpcy5oZWFkZXIkXG4gICAgICAgICAgICBhd2FpdCBwYW5lbC5jbGljaygpXG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLndhaXRVbnRpbChhc3luYyAoKSA9PiAoXG4gICAgICAgICAgICAgICAgYXdhaXQgcGFuZWwuZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMuaGVhZGVyRXhwYW5kZWQpID09PSAndHJ1ZSdcbiAgICAgICAgICAgICksIHsgdGltZW91dDogMTAwMCB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2UgdGhlIHNlY3Rpb24gaWYgZXhwYW5kZWRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIHRoZSBzZWN0aW9uIGlzIGNvbGxhcHNlZFxuICAgICAqL1xuICAgIGFzeW5jIGNvbGxhcHNlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNIZWFkZXJIaWRkZW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNFeHBhbmRlZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lbCA9IGF3YWl0IHRoaXMuaGVhZGVyJFxuICAgICAgICAgICAgYXdhaXQgcGFuZWwuY2xpY2soKVxuICAgICAgICAgICAgYXdhaXQgYnJvd3Nlci53YWl0VW50aWwoYXN5bmMgKCkgPT4gKFxuICAgICAgICAgICAgICAgIGF3YWl0IHBhbmVsLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmhlYWRlckV4cGFuZGVkKSA9PT0gJ2ZhbHNlJ1xuICAgICAgICAgICAgKSwgeyB0aW1lb3V0OiAxMDAwIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB3aGV0aGVyIHRoZSBzZWN0aW9uIGlzIGV4cGFuZGVkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdHJ1ZS9mYWxzZVxuICAgICAqL1xuICAgIGFzeW5jIGlzRXhwYW5kZWQgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBleHBhbmRlZCA9IGF3YWl0IHRoaXMuaGVhZGVyJC5nZXRBdHRyaWJ1dGUodGhpcy5sb2NhdG9ycy5oZWFkZXJFeHBhbmRlZClcbiAgICAgICAgcmV0dXJuIGV4cGFuZGVkID09PSAndHJ1ZSdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBbV2VsY29tZSBDb250ZW50XShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9hcGkvZXh0ZW5zaW9uLWd1aWRlcy90cmVlLXZpZXcjd2VsY29tZS1jb250ZW50KVxuICAgICAqIHByZXNlbnQgaW4gdGhpcyBWaWV3U2VjdGlvbiBhbmQgcmV0dXJucyBpdC4gSWYgbm9uZSBpcyBmb3VuZCwgdGhlbiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZFxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGZpbmRXZWxjb21lQ29udGVudCAoKTogUHJvbWlzZTxXZWxjb21lQ29udGVudFNlY3Rpb24gfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMud2VsY29tZUNvbnRlbnQkXG4gICAgICAgICAgICBpZiAoIWF3YWl0IHJlcy5pc0Rpc3BsYXllZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2VsY29tZUNvbnRlbnRTZWN0aW9uKHRoaXMubG9jYXRvck1hcCwgcmVzIGFzIGFueSwgdGhpcylcbiAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYWxsIGl0ZW1zIGN1cnJlbnRseSB2aXNpYmxlIGluIHRoZSB2aWV3IHNlY3Rpb24uXG4gICAgICogTm90ZSB0aGF0IGFueSBpdGVtIGN1cnJlbnRseSBiZXlvbmQgdGhlIHZpc2libGUgbGlzdCwgaS5lLiBub3Qgc2Nyb2xsZWQgdG8sIHdpbGwgbm90IGJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBhcnJheSBvZiBWaWV3SXRlbSBvYmplY3RzXG4gICAgICovXG4gICAgYWJzdHJhY3QgZ2V0VmlzaWJsZUl0ZW1zICgpOiBQcm9taXNlPFZpZXdJdGVtW10+XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFuIGl0ZW0gaW4gdGhpcyB2aWV3IHNlY3Rpb24gYnkgbGFiZWwuIERvZXMgbm90IHBlcmZvcm0gcmVjdXJzaXZlIHNlYXJjaCB0aHJvdWdoIHRoZSB3aG9sZSB0cmVlLlxuICAgICAqIERvZXMgaG93ZXZlciBzY3JvbGwgdGhyb3VnaCBhbGwgdGhlIGV4cGFuZGVkIGNvbnRlbnQuIFdpbGwgZmluZCBpdGVtcyBiZXlvbmQgdGhlIGN1cnJlbnQgc2Nyb2xsIHJhbmdlLlxuICAgICAqIEBwYXJhbSBsYWJlbCBMYWJlbCBvZiB0aGUgaXRlbSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSBtYXhMZXZlbCBMaW1pdCBob3cgZGVlcCB0aGUgYWxnb3JpdGhtIHNob3VsZCBsb29rIGludG8gYW55IGV4cGFuZGVkIGl0ZW1zLCBkZWZhdWx0IHVubGltaXRlZCAoMClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBWaWV3SXRlbSBvYmplY3QgaXMgc3VjaCBpdGVtIGV4aXN0cywgdW5kZWZpbmVkIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGFic3RyYWN0IGZpbmRJdGVtIChsYWJlbDogc3RyaW5nLCBtYXhMZXZlbD86IG51bWJlcik6IFByb21pc2U8Vmlld0l0ZW0gfCB1bmRlZmluZWQ+XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIGFuIGl0ZW0gd2l0aCBhIGdpdmVuIHBhdGggcmVwcmVzZW50ZWQgYnkgYSBzZXF1ZW5jZSBvZiBsYWJlbHNcbiAgICAgKlxuICAgICAqIGUuZyB0byBvcGVuICdmaWxlJyBpbnNpZGUgJ2ZvbGRlcicsIGNhbGxcbiAgICAgKiBvcGVuSXRlbSgnZm9sZGVyJywgJ2ZpbGUnKVxuICAgICAqXG4gICAgICogVGhlIGZpcnN0IGl0ZW0gaXMgb25seSBzZWFyY2hlZCBmb3IgZGlyZWN0bHkgd2l0aGluIHRoZSByb290IGVsZW1lbnQgKGRlcHRoIDEpLlxuICAgICAqIFRoZSBsYWJlbCBzZXF1ZW5jZSBpcyBoYW5kbGVkIGluIG9yZGVyLiBJZiBhIGxlYWYgaXRlbSAoYSBmaWxlIGZvciBleGFtcGxlKSBpcyBmb3VuZCBpbiB0aGUgbWlkZGxlXG4gICAgICogb2YgdGhlIHNlcXVlbmNlLCB0aGUgcmVzdCBpcyBpZ25vcmVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIGl0ZW0gc3RydWN0dXJlIGlzIGZsYXQsIHVzZSB0aGUgaXRlbSdzIHRpdGxlIHRvIHNlYXJjaCBieS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIFNlcXVlbmNlIG9mIGxhYmVscyB0aGF0IG1ha2UgdXAgdGhlIHBhdGggdG8gYSBnaXZlbiBpdGVtLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIFZpZXdJdGVtIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBsYXN0IGl0ZW0ncyBjaGlsZHJlbi5cbiAgICAgKiBJZiB0aGUgbGFzdCBpdGVtIGlzIGEgbGVhZiwgZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgYWJzdHJhY3Qgb3Blbkl0ZW0gKC4uLnBhdGg6IHN0cmluZ1tdKTogUHJvbWlzZTxWaWV3SXRlbVtdPlxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGFjdGlvbiBidXR0b25zIG9uIHRoZSBzZWN0aW9uJ3MgaGVhZGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gYXJyYXkgb2YgVmlld1BhbmVsQWN0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY3Rpb25zICgpOiBQcm9taXNlPFZpZXdQYW5lbEFjdGlvbltdPiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbnM6IFZpZXdQYW5lbEFjdGlvbltdID0gW11cblxuICAgICAgICBpZiAoIWF3YWl0IHRoaXMuaXNIZWFkZXJIaWRkZW4oKSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzXG4gICAgICAgICAgICAgICAgLmhlYWRlciRcbiAgICAgICAgICAgICAgICAuJCh0aGlzLmxvY2F0b3JzLmFjdGlvbnMpXG4gICAgICAgICAgICAgICAgLiQkKHRoaXMubG9jYXRvcnMuYnV0dG9uKVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBWaWV3UGFuZWxBY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2F0b3JNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCBhcyBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICkud2FpdCgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYW4gYWN0aW9uIGJ1dHRvbiBvbiB0aGUgc2VjdGlvbnMncyBoZWFkZXIgYnkgaXRzIGxhYmVsXG4gICAgICogQHBhcmFtIGxhYmVsIGxhYmVsL3RpdGxlIG9mIHRoZSBidXR0b25cbiAgICAgKiBAcmV0dXJucyBWaWV3UGFuZWxBY3Rpb24gb2JqZWN0IGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWN0aW9uIChsYWJlbDogc3RyaW5nKTogUHJvbWlzZTxWaWV3UGFuZWxBY3Rpb24gfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0QWN0aW9ucygpXG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChhd2FpdCBhY3Rpb24uZ2V0TGFiZWwoKSA9PT0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIG9uIHRoZSBNb3JlIEFjdGlvbnMuLi4gaXRlbSBpZiBpdCBleGlzdHNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIENvbnRleHRNZW51IHBhZ2Ugb2JqZWN0IGlmIHRoZSBhY3Rpb24gc3VjY2VlZHMsIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBhc3luYyBtb3JlQWN0aW9ucyAoKTogUHJvbWlzZTxDb250ZXh0TWVudSB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBtb3JlID0gYXdhaXQgdGhpcy5nZXRBY3Rpb24oJ01vcmUgQWN0aW9ucy4uLicpXG4gICAgICAgIGlmICghbW9yZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGJ0biA9IG5ldyBjbGFzcyBleHRlbmRzIEVsZW1lbnRXaXRoQ29udGV4dE1lbnU8dHlwZW9mIFZpZXdTZWN0aW9uTG9jYXRvcnM+IHtcbiAgICAgICAgICAgIGxvY2F0b3JLZXkgPSAnVmlld1NlY3Rpb24nIGFzIGNvbnN0XG5cbiAgICAgICAgICAgIGFzeW5jIG9wZW5Db250ZXh0TWVudSAoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbGVtLmNsaWNrKClcbiAgICAgICAgICAgICAgICBjb25zdCBzaGFkb3dSb290SG9zdCA9IGF3YWl0IHNlY3Rpb24uZWxlbS4kJCgnLnNoYWRvdy1yb290LWhvc3QnKVxuICAgICAgICAgICAgICAgIGlmIChzaGFkb3dSb290SG9zdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSAkKGF3YWl0IGJyb3dzZXIuZXhlY3V0ZSgncmV0dXJuIGFyZ3VtZW50c1swXS5zaGFkb3dSb290Jywgc2hhZG93Um9vdEhvc3RbMF0pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbnRleHRNZW51KHNlbGYubG9jYXRvck1hcCwgc2hhZG93Um9vdCkud2FpdCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci5vcGVuQ29udGV4dE1lbnUoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KHRoaXMubG9jYXRvck1hcCwgbW9yZS5lbGVtLCB0aGlzLmVsZW0pXG4gICAgICAgIHJldHVybiBidG4ub3BlbkNvbnRleHRNZW51KClcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGlzSGVhZGVySGlkZGVuICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLmhlYWRlciQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5pbmRleE9mKCdoaWRkZW4nKSA+IC0xXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdQYW5lbEFjdGlvbiBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBWaWV3U2VjdGlvbkxvY2F0b3JzPiB7IH1cbi8qKlxuICogQWN0aW9uIGJ1dHRvbiBvbiB0aGUgaGVhZGVyIG9mIGEgdmlldyBzZWN0aW9uXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoVmlld1NlY3Rpb25Mb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBWaWV3UGFuZWxBY3Rpb24gZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgVmlld1NlY3Rpb25Mb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnVmlld1NlY3Rpb24nIGFzIGNvbnN0XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtZW50OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgdmlld1BhcnQ6IFZpZXdTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBlbGVtZW50LCB2aWV3UGFydC5lbGVtKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBsYWJlbCBvZiB0aGUgYWN0aW9uIGJ1dHRvblxuICAgICAqL1xuICAgIGFzeW5jIGdldExhYmVsICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmJ1dHRvbkxhYmVsKVxuICAgIH1cblxuICAgIGFzeW5jIHdhaXQgKHRpbWVvdXQgPSAxMDAwKTogUHJvbWlzZTx0aGlzPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZWxlbS53YWl0Rm9yRW5hYmxlZCh7IHRpbWVvdXQgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG59XG4iXX0=