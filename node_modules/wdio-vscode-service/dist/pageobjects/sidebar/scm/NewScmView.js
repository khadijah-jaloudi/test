var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { ScmView, ScmProvider, MoreAction, ScmChange } from './ScmView.js';
import { PageDecorator, ElementWithContextMenu } from '../../utils.js';
import { ScmView as ScmViewLocators } from '../../../locators/1.73.0.js';
import { CMD_KEY } from '../../../constants.js';
/**
 * New SCM view for code 1.47 onwards
 *
 * @category Sidebar
 */
export let NewScmView = class NewScmView extends ScmView {
    async getProviders() {
        const inputs = await this.inputField$$;
        if (inputs.length < 1) {
            return [];
        }
        const providers = await this.multiScmProvider$$;
        if (inputs.length === 1 && providers.length < 1) {
            return [await new SingleScmProvider(this.locatorMap, this.singleScmProvider$, this).wait()];
        }
        const elements = await this.multiProviderItem$$;
        return Promise.all(elements.map(async (element) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new MultiScmProvider(this.locatorMap, element, this).wait())));
    }
};
NewScmView = __decorate([
    PageDecorator(ScmViewLocators)
], NewScmView);
/**
 * Implementation for a single SCM provider
 *
 * @category Sidebar
 */
export let SingleScmProvider = class SingleScmProvider extends ScmProvider {
    /**
     * There is no title available for a single provider
     */
    getTitle() {
        return Promise.resolve('');
    }
    /**
     * No title available for single provider
     */
    getType() {
        return Promise.resolve('');
    }
    async takeAction(title) {
        const view = this.view;
        const buttons = await view.getTitlePart().getActions();
        const names = await Promise.all(buttons.map((button) => button.getTitle()));
        const index = names.findIndex((name) => name === title);
        if (index > -1) {
            await buttons[index].elem.click();
            return true;
        }
        return false;
    }
    async openMoreActions() {
        const view = this.view;
        return new MoreAction(this.locatorMap, view).openContextMenu();
    }
    async getChanges(staged = false) {
        const count = await this.getChangeCount(staged);
        const elements = [];
        if (count > 0) {
            const header = staged
                ? await this.stagedChanges$
                : await this.changes$;
            const startIndex = +await header.getAttribute('data-index');
            const depth = +await header.getAttribute('aria-level') + 1;
            const items = await this.itemLevel$$(depth);
            for (const item of items) {
                const index = +await item.getAttribute('data-index');
                if (index > startIndex && index <= startIndex + count) {
                    elements.push(item);
                }
            }
        }
        return Promise.all(elements.map(async (element) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new ScmChange(this.locatorMap, element, this).wait())));
    }
};
SingleScmProvider = __decorate([
    PageDecorator(ScmViewLocators)
], SingleScmProvider);
/**
 * Implementation of an SCM provider when multiple providers are available
 *
 * @category Sidebar
 */
export let MultiScmProvider = class MultiScmProvider extends ScmProvider {
    async takeAction(title) {
        const actions = await this.action$$;
        const names = await Promise.all(actions.map(async (action) => action.getAttribute('title')));
        const index = names.findIndex((item) => item === title);
        if (index > -1) {
            await actions[index].click();
            return true;
        }
        return false;
    }
    async openMoreActions() {
        return new MultiMoreAction(this.locatorMap, this).openContextMenu();
    }
    async commitChanges(message) {
        const index = +await this.elem.getAttribute('data-index') + 1;
        const input = await this.view.itemIndex$(index);
        await input.clearValue();
        await input.addValue(message);
        await browser.action('key')
            .down(CMD_KEY).down(Key.Enter)
            .up(CMD_KEY).up(Key.Enter)
            .perform();
    }
    async getChanges(staged = false) {
        const count = await this.getChangeCount(staged);
        const elements = [];
        if (count > 0) {
            const index = +await this.elem.getAttribute('data-index');
            const headers = staged
                ? await this.stagedChanges$$
                : await this.changes$$;
            let header;
            for (const item of headers) {
                if (+await item.getAttribute('data-index') > index) {
                    header = item;
                }
            }
            if (!header) {
                return [];
            }
            const startIndex = +await header.getAttribute('data-index');
            const depth = +await header.getAttribute('aria-level') + 1;
            const items = await this.view.itemLevel$$(depth);
            for (const item of items) {
                const indexInner = +await item.getAttribute('data-index');
                if (indexInner > startIndex && indexInner <= startIndex + count) {
                    elements.push(item);
                }
            }
        }
        return Promise.all(elements.map(async (element) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new ScmChange(this.locatorMap, element, this).wait())));
    }
    async getChangeCount(staged = false) {
        const locator = staged ? this.locators.stagedChanges : this.locators.changes;
        const rows = await this.view.elem.$$(locator);
        const index = +await this.elem.getAttribute('data-index');
        for (const row of rows) {
            if (+await row.getAttribute('data-index') > index) {
                const count = await rows[0].$(this.locators.changeCount);
                return +await count.getText();
            }
        }
        return 0;
    }
};
MultiScmProvider = __decorate([
    PageDecorator(ScmViewLocators)
], MultiScmProvider);
/**
 * Multi More Action
 *
 * @category Sidebar
 */
let MultiMoreAction = class MultiMoreAction extends ElementWithContextMenu {
    constructor(locators, scm) {
        super(locators, locators.ScmView.multiMore, scm.elem);
        this.scm = scm;
        /**
         * @private
         */
        this.locatorKey = 'ScmView';
    }
};
MultiMoreAction = __decorate([
    PageDecorator(ScmViewLocators)
], MultiMoreAction);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV3U2NtVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9zaWRlYmFyL3NjbS9OZXdTY21WaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDakMsT0FBTyxFQUNILE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFDOUMsTUFBTSxjQUFjLENBQUE7QUFFckIsT0FBTyxFQUNILGFBQWEsRUFBa0Isc0JBQXNCLEVBQ3hELE1BQU0sZ0JBQWdCLENBQUE7QUFDdkIsT0FBTyxFQUFFLE9BQU8sSUFBSSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUN4RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFHL0M7Ozs7R0FJRztBQUVJLFdBQU0sVUFBVSxHQUFoQixNQUFNLFVBQVcsU0FBUSxPQUFPO0lBQ25DLEtBQUssQ0FBQyxZQUFZO1FBQ2QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFBO1FBQ3RDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUE7U0FDWjtRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFBO1FBQy9DLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0MsT0FBTyxDQUFDLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQzlGO1FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUE7UUFDL0MsT0FBTyxP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biAgICBTY21WaWV3LCBTY21Qcm92aWRlciwgTW9yZUFjdGlvbiwgU2NtQ2hhbmdlXG59IGZyb20gJy4vU2NtVmlldy5qcydcbmltcG9ydCB7IENvbnRleHRNZW51IH0gZnJvbSAnLi4vLi4vaW5kZXguanMnXG5pbXBvcnQge1xuICAgIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBFbGVtZW50V2l0aENvbnRleHRNZW51LCBWU0NvZGVMb2NhdG9yTWFwXG59IGZyb20gJy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgU2NtVmlldyBhcyBTY21WaWV3TG9jYXRvcnMgfSBmcm9tICcuLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5pbXBvcnQgeyBDTURfS0VZIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5ld1NjbVZpZXcgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgU2NtVmlld0xvY2F0b3JzPiB7IH1cbi8qKlxuICogTmV3IFNDTSB2aWV3IGZvciBjb2RlIDEuNDcgb253YXJkc1xuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFNjbVZpZXdMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBOZXdTY21WaWV3IGV4dGVuZHMgU2NtVmlldyB7XG4gICAgYXN5bmMgZ2V0UHJvdmlkZXJzICgpOiBQcm9taXNlPFNjbVByb3ZpZGVyW10+IHtcbiAgICAgICAgY29uc3QgaW5wdXRzID0gYXdhaXQgdGhpcy5pbnB1dEZpZWxkJCRcbiAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IGF3YWl0IHRoaXMubXVsdGlTY21Qcm92aWRlciQkXG4gICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09PSAxICYmIHByb3ZpZGVycy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW2F3YWl0IG5ldyBTaW5nbGVTY21Qcm92aWRlcih0aGlzLmxvY2F0b3JNYXAsIHRoaXMuc2luZ2xlU2NtUHJvdmlkZXIkLCB0aGlzKS53YWl0KCldXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMubXVsdGlQcm92aWRlckl0ZW0kJFxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICBlbGVtZW50cy5tYXAoYXN5bmMgKGVsZW1lbnQpID0+IChcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIG5ldyBNdWx0aVNjbVByb3ZpZGVyKHRoaXMubG9jYXRvck1hcCwgZWxlbWVudCBhcyBhbnksIHRoaXMpLndhaXQoKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaW5nbGVTY21Qcm92aWRlciBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBTY21WaWV3TG9jYXRvcnM+IHsgfVxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBmb3IgYSBzaW5nbGUgU0NNIHByb3ZpZGVyXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoU2NtVmlld0xvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIFNpbmdsZVNjbVByb3ZpZGVyIGV4dGVuZHMgU2NtUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZXJlIGlzIG5vIHRpdGxlIGF2YWlsYWJsZSBmb3IgYSBzaW5nbGUgcHJvdmlkZXJcbiAgICAgKi9cbiAgICBnZXRUaXRsZSAoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm8gdGl0bGUgYXZhaWxhYmxlIGZvciBzaW5nbGUgcHJvdmlkZXJcbiAgICAgKi9cbiAgICBnZXRUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJylcbiAgICB9XG5cbiAgICBhc3luYyB0YWtlQWN0aW9uICh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXcgYXMgTmV3U2NtVmlld1xuICAgICAgICBjb25zdCBidXR0b25zID0gYXdhaXQgdmlldy5nZXRUaXRsZVBhcnQoKS5nZXRBY3Rpb25zKClcbiAgICAgICAgY29uc3QgbmFtZXMgPSBhd2FpdCBQcm9taXNlLmFsbChidXR0b25zLm1hcCgoYnV0dG9uKSA9PiBidXR0b24uZ2V0VGl0bGUoKSkpXG5cbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5maW5kSW5kZXgoKG5hbWUpID0+IG5hbWUgPT09IHRpdGxlKVxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgYXdhaXQgYnV0dG9uc1tpbmRleF0uZWxlbS5jbGljaygpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGFzeW5jIG9wZW5Nb3JlQWN0aW9ucyAoKTogUHJvbWlzZTxDb250ZXh0TWVudT4ge1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3IGFzIE5ld1NjbVZpZXdcbiAgICAgICAgcmV0dXJuIG5ldyBNb3JlQWN0aW9uKHRoaXMubG9jYXRvck1hcCwgdmlldykub3BlbkNvbnRleHRNZW51KClcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDaGFuZ2VzIChzdGFnZWQgPSBmYWxzZSk6IFByb21pc2U8U2NtQ2hhbmdlW10+IHtcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLmdldENoYW5nZUNvdW50KHN0YWdlZClcbiAgICAgICAgY29uc3QgZWxlbWVudHM6IFdlYmRyaXZlcklPLkVsZW1lbnRbXSA9IFtdXG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gc3RhZ2VkXG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLnN0YWdlZENoYW5nZXMkXG4gICAgICAgICAgICAgICAgOiBhd2FpdCB0aGlzLmNoYW5nZXMkXG4gICAgICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gK2F3YWl0IGhlYWRlci5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKVxuICAgICAgICAgICAgY29uc3QgZGVwdGggPSArYXdhaXQgaGVhZGVyLmdldEF0dHJpYnV0ZSgnYXJpYS1sZXZlbCcpICsgMVxuXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IHRoaXMuaXRlbUxldmVsJCQoZGVwdGgpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9ICthd2FpdCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gc3RhcnRJbmRleCAmJiBpbmRleCA8PSBzdGFydEluZGV4ICsgY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICBlbGVtZW50cy5tYXAoYXN5bmMgKGVsZW1lbnQpID0+IChcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIG5ldyBTY21DaGFuZ2UodGhpcy5sb2NhdG9yTWFwLCBlbGVtZW50IGFzIGFueSwgdGhpcykud2FpdCgpXG4gICAgICAgICAgICApKVxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE11bHRpU2NtUHJvdmlkZXIgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgU2NtVmlld0xvY2F0b3JzPiB7IH1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYW4gU0NNIHByb3ZpZGVyIHdoZW4gbXVsdGlwbGUgcHJvdmlkZXJzIGFyZSBhdmFpbGFibGVcbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcihTY21WaWV3TG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgTXVsdGlTY21Qcm92aWRlciBleHRlbmRzIFNjbVByb3ZpZGVyIHtcbiAgICBhc3luYyB0YWtlQWN0aW9uICh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBhd2FpdCB0aGlzLmFjdGlvbiQkXG4gICAgICAgIGNvbnN0IG5hbWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWN0aW9ucy5tYXAoYXN5bmMgKGFjdGlvbikgPT4gYWN0aW9uLmdldEF0dHJpYnV0ZSgndGl0bGUnKSkpXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZXMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtID09PSB0aXRsZSlcblxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgYXdhaXQgYWN0aW9uc1tpbmRleF0uY2xpY2soKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBhc3luYyBvcGVuTW9yZUFjdGlvbnMgKCk6IFByb21pc2U8Q29udGV4dE1lbnU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBNdWx0aU1vcmVBY3Rpb24odGhpcy5sb2NhdG9yTWFwLCB0aGlzKS5vcGVuQ29udGV4dE1lbnUoKVxuICAgIH1cblxuICAgIGFzeW5jIGNvbW1pdENoYW5nZXMgKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBpbmRleCA9ICthd2FpdCB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykgKyAxXG4gICAgICAgIGNvbnN0IGlucHV0ID0gYXdhaXQgdGhpcy52aWV3Lml0ZW1JbmRleCQoaW5kZXgpXG4gICAgICAgIGF3YWl0IGlucHV0LmNsZWFyVmFsdWUoKVxuICAgICAgICBhd2FpdCBpbnB1dC5hZGRWYWx1ZShtZXNzYWdlKVxuICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JylcbiAgICAgICAgICAgIC5kb3duKENNRF9LRVkpLmRvd24oS2V5LkVudGVyKVxuICAgICAgICAgICAgLnVwKENNRF9LRVkpLnVwKEtleS5FbnRlcilcbiAgICAgICAgICAgIC5wZXJmb3JtKClcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDaGFuZ2VzIChzdGFnZWQgPSBmYWxzZSk6IFByb21pc2U8U2NtQ2hhbmdlW10+IHtcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLmdldENoYW5nZUNvdW50KHN0YWdlZClcbiAgICAgICAgY29uc3QgZWxlbWVudHM6IFdlYmRyaXZlcklPLkVsZW1lbnRbXSA9IFtdXG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSArYXdhaXQgdGhpcy5lbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gc3RhZ2VkXG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLnN0YWdlZENoYW5nZXMkJFxuICAgICAgICAgICAgICAgIDogYXdhaXQgdGhpcy5jaGFuZ2VzJCRcbiAgICAgICAgICAgIGxldCBoZWFkZXIhOiBXZWJkcml2ZXJJTy5FbGVtZW50XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCthd2FpdCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyID0gaXRlbVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSArYXdhaXQgaGVhZGVyLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpXG4gICAgICAgICAgICBjb25zdCBkZXB0aCA9ICthd2FpdCBoZWFkZXIuZ2V0QXR0cmlidXRlKCdhcmlhLWxldmVsJykgKyAxXG5cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgdGhpcy52aWV3Lml0ZW1MZXZlbCQkKGRlcHRoKVxuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhJbm5lciA9ICthd2FpdCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4SW5uZXIgPiBzdGFydEluZGV4ICYmIGluZGV4SW5uZXIgPD0gc3RhcnRJbmRleCArIGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goaXRlbSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgZWxlbWVudHMubWFwKGFzeW5jIChlbGVtZW50KSA9PiAoXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgICAgICBuZXcgU2NtQ2hhbmdlKHRoaXMubG9jYXRvck1hcCwgZWxlbWVudCBhcyBhbnksIHRoaXMpLndhaXQoKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFzeW5jIGdldENoYW5nZUNvdW50IChzdGFnZWQgPSBmYWxzZSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IGxvY2F0b3IgPSBzdGFnZWQgPyB0aGlzLmxvY2F0b3JzLnN0YWdlZENoYW5nZXMgOiB0aGlzLmxvY2F0b3JzLmNoYW5nZXNcbiAgICAgICAgY29uc3Qgcm93cyA9IGF3YWl0IHRoaXMudmlldy5lbGVtLiQkKGxvY2F0b3IpXG4gICAgICAgIGNvbnN0IGluZGV4ID0gK2F3YWl0IHRoaXMuZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKVxuXG4gICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgICAgICAgIGlmICgrYXdhaXQgcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGF3YWl0IHJvd3NbMF0uJCh0aGlzLmxvY2F0b3JzLmNoYW5nZUNvdW50KVxuICAgICAgICAgICAgICAgIHJldHVybiArYXdhaXQgY291bnQuZ2V0VGV4dCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDBcbiAgICB9XG59XG5cbmludGVyZmFjZSBNdWx0aU1vcmVBY3Rpb24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgU2NtVmlld0xvY2F0b3JzPiB7IH1cbi8qKlxuICogTXVsdGkgTW9yZSBBY3Rpb25cbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcihTY21WaWV3TG9jYXRvcnMpXG5jbGFzcyBNdWx0aU1vcmVBY3Rpb24gZXh0ZW5kcyBFbGVtZW50V2l0aENvbnRleHRNZW51PHR5cGVvZiBTY21WaWV3TG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ1NjbVZpZXcnIGFzIGNvbnN0XG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgcHVibGljIHNjbTogU2NtUHJvdmlkZXJcbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIGxvY2F0b3JzLlNjbVZpZXcubXVsdGlNb3JlIGFzIHN0cmluZywgc2NtLmVsZW0pXG4gICAgfVxufVxuIl19