var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CustomTreeItem_1;
import { TreeItem } from '../../ViewItem.js';
import { PageDecorator } from '../../../utils.js';
import { TreeItem as TreeItemLocators, CustomTreeItem as CustomTreeItemLocators } from '../../../../locators/1.73.0.js';
/**
 * View item in a custom-made content section (e.g. an extension tree view)
 *
 * @category Sidebar
 */
export let CustomTreeItem = CustomTreeItem_1 = class CustomTreeItem extends TreeItem {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        this.viewPart = viewPart;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'CustomTreeItem'];
    }
    async getLabel() {
        return this.elem.$(this.locatorMap.CustomTreeSection.itemLabel).getText();
    }
    async getTooltip() {
        return this.elem.getAttribute(this.locators.tooltipAttribute);
    }
    async getDescription() {
        return this.description$.getText();
    }
    async isExpanded() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr === this.locators.expandedValue;
    }
    async getChildren() {
        const rows = await this.getChildItems(this.locatorMap.DefaultTreeSection.itemRow);
        const items = await Promise.all(rows.map(async (row) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new CustomTreeItem_1(this.locatorMap, row, this.viewPart).wait())));
        return items;
    }
    async isExpandable() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr !== null;
    }
};
CustomTreeItem = CustomTreeItem_1 = __decorate([
    PageDecorator({ ...TreeItemLocators, ...CustomTreeItemLocators })
], CustomTreeItem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tVHJlZUl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci90cmVlL2N1c3RvbS9DdXN0b21UcmVlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLG1CQUFtQixDQUFBO0FBQ25GLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGNBQWMsSUFBSSxzQkFBc0IsRUFDM0MsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksV0FBTSxjQUFjLHNCQUFwQixNQUFNLGNBQWUsU0FBUSxRQUFRO0lBTXhDLFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDOUMsUUFBcUI7UUFFNUIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRmhDLGFBQVEsR0FBUixRQUFRLENBQWE7UUFSaEM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsQ0FBQyxVQUFtQixFQUFFLGdCQUF5QixDQUFDLENBQUE7SUFRcEUsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFNBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN2RixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3RDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVTtRQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNyRSxPQUFPLElBQUksS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQTtJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVc7UUFDYixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFpQixDQUFDLENBQUE7UUFDM0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ3BCLGlFQUFpRTtRQUNqRSxJQUFJLGdCQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUN4RSxDQUFDLENBQ0wsQ0FBQTtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNkLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNyRSxPQUFPLElBQUksS0FBSyxJQUFJLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7QUE5Q1ksY0FBYztJQUQxQixhQUFhLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztHQUNyRCxjQUFjLENBOEMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHsgVHJlZVNlY3Rpb24gfSBmcm9tICcuLi9UcmVlU2VjdGlvbi5qcydcbmltcG9ydCB7IFRyZWVJdGVtLCBWaWV3SXRlbUxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vVmlld0l0ZW0uanMnXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciwgVlNDb2RlTG9jYXRvck1hcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBUcmVlSXRlbSBhcyBUcmVlSXRlbUxvY2F0b3JzLFxuICAgIEN1c3RvbVRyZWVJdGVtIGFzIEN1c3RvbVRyZWVJdGVtTG9jYXRvcnNcbn0gZnJvbSAnLi4vLi4vLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbVRyZWVJdGVtIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8Vmlld0l0ZW1Mb2NhdG9ycz4geyB9XG4vKipcbiAqIFZpZXcgaXRlbSBpbiBhIGN1c3RvbS1tYWRlIGNvbnRlbnQgc2VjdGlvbiAoZS5nLiBhbiBleHRlbnNpb24gdHJlZSB2aWV3KVxuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKHsgLi4uVHJlZUl0ZW1Mb2NhdG9ycywgLi4uQ3VzdG9tVHJlZUl0ZW1Mb2NhdG9ycyB9KVxuZXhwb3J0IGNsYXNzIEN1c3RvbVRyZWVJdGVtIGV4dGVuZHMgVHJlZUl0ZW0ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSBbJ1RyZWVJdGVtJyBhcyBjb25zdCwgJ0N1c3RvbVRyZWVJdGVtJyBhcyBjb25zdF1cblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIGVsZW1lbnQ6IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+LFxuICAgICAgICBwdWJsaWMgdmlld1BhcnQ6IFRyZWVTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBlbGVtZW50LCB2aWV3UGFydC5lbGVtKVxuICAgIH1cblxuICAgIGFzeW5jIGdldExhYmVsICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtLiQodGhpcy5sb2NhdG9yTWFwLkN1c3RvbVRyZWVTZWN0aW9uLml0ZW1MYWJlbCBhcyBzdHJpbmcpLmdldFRleHQoKVxuICAgIH1cblxuICAgIGFzeW5jIGdldFRvb2x0aXAgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMudG9vbHRpcEF0dHJpYnV0ZSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXREZXNjcmlwdGlvbiAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24kLmdldFRleHQoKVxuICAgIH1cblxuICAgIGFzeW5jIGlzRXhwYW5kZWQgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBhdHRyID0gYXdhaXQgdGhpcy5lbGVtLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmV4cGFuZGVkQXR0cilcbiAgICAgICAgcmV0dXJuIGF0dHIgPT09IHRoaXMubG9jYXRvcnMuZXhwYW5kZWRWYWx1ZVxuICAgIH1cblxuICAgIGFzeW5jIGdldENoaWxkcmVuICgpOiBQcm9taXNlPFRyZWVJdGVtW10+IHtcbiAgICAgICAgY29uc3Qgcm93cyA9IGF3YWl0IHRoaXMuZ2V0Q2hpbGRJdGVtcyh0aGlzLmxvY2F0b3JNYXAuRGVmYXVsdFRyZWVTZWN0aW9uLml0ZW1Sb3cgYXMgc3RyaW5nKVxuICAgICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgcm93cy5tYXAoYXN5bmMgKHJvdykgPT4gKFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgbmV3IEN1c3RvbVRyZWVJdGVtKHRoaXMubG9jYXRvck1hcCwgcm93IGFzIGFueSwgdGhpcy52aWV3UGFydCkud2FpdCgpXG4gICAgICAgICAgICApKVxuICAgICAgICApXG4gICAgICAgIHJldHVybiBpdGVtc1xuICAgIH1cblxuICAgIGFzeW5jIGlzRXhwYW5kYWJsZSAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBhd2FpdCB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMuZXhwYW5kZWRBdHRyKVxuICAgICAgICByZXR1cm4gYXR0ciAhPT0gbnVsbFxuICAgIH1cbn1cbiJdfQ==