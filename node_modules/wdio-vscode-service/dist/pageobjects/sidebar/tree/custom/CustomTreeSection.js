var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { TreeSection } from '../TreeSection.js';
import { CustomTreeItem } from './CustomTreeItem.js';
import { PageDecorator } from '../../../utils.js';
import { ViewSection as ViewSectionLocators, CustomTreeSection as CustomTreeSectionLocators } from '../../../../locators/1.73.0.js';
/**
 * Custom tree view, e.g. contributed by an extension
 *
 * @category Sidebar
 */
export let CustomTreeSection = class CustomTreeSection extends TreeSection {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = ['ViewSection', 'CustomTreeSection'];
    }
    async getVisibleItems() {
        const items = [];
        const elements = await this.itemRow$$;
        for (const element of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            items.push(await new CustomTreeItem(this.locatorMap, element, this).wait());
        }
        return items;
    }
    async findItem(label, maxLevel = 0) {
        await this.expand();
        const container = await this.rowContainer$;
        await container.waitForExist({ timeout: 5000 });
        await browser.action('key').down(Key.Home).up(Key.Home).perform();
        let item;
        const elements = await container.$$(this.locators.itemRow);
        for (const element of elements) {
            const temp = await element.$$(this.locators.rowWithLabel(label));
            if (temp.length > 0) {
                const level = +await temp[0].getAttribute(this.locatorMap.ViewSection.level);
                if (maxLevel < 1 || level <= maxLevel) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    item = await new CustomTreeItem(this.locatorMap, element, this).wait();
                }
            }
        }
        return item;
    }
};
CustomTreeSection = __decorate([
    PageDecorator({ ...ViewSectionLocators, ...CustomTreeSectionLocators })
], CustomTreeSection);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tVHJlZVNlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci90cmVlL2N1c3RvbS9DdXN0b21UcmVlU2VjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRWpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFHcEQsT0FBTyxFQUFFLGFBQWEsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUNqRSxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxpQkFBaUIsSUFBSSx5QkFBeUIsRUFDakQsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksV0FBTSxpQkFBaUIsR0FBdkIsTUFBTSxpQkFBa0IsU0FBUSxXQUFXO0lBQTNDOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsYUFBc0IsRUFBRSxtQkFBNEIsQ0FBQyxDQUFBO0lBaUM5RSxDQUFDO0lBL0JHLEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQTtRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsaUVBQWlFO1lBQ2pFLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQ3JGO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUUsS0FBYSxFQUFFLFFBQVEsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRW5CLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQTtRQUMxQyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUMvQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2pFLElBQUksSUFBMEIsQ0FBQTtRQUU5QixNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMxRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNoRSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFlLENBQUMsQ0FBQTtnQkFDdEYsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxRQUFRLEVBQUU7b0JBQ25DLGlFQUFpRTtvQkFDakUsSUFBSSxHQUFHLE1BQU0sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7aUJBQ2hGO2FBQ0o7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztDQUNKLENBQUE7QUFyQ1ksaUJBQWlCO0lBRDdCLGFBQWEsQ0FBQyxFQUFFLEdBQUcsbUJBQW1CLEVBQUUsR0FBRyx5QkFBeUIsRUFBRSxDQUFDO0dBQzNELGlCQUFpQixDQXFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXkgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHsgVHJlZVNlY3Rpb24gfSBmcm9tICcuLi9UcmVlU2VjdGlvbi5qcydcbmltcG9ydCB7IFRyZWVJdGVtIH0gZnJvbSAnLi4vLi4vVmlld0l0ZW0uanMnXG5pbXBvcnQgeyBDdXN0b21UcmVlSXRlbSB9IGZyb20gJy4vQ3VzdG9tVHJlZUl0ZW0uanMnXG5pbXBvcnQgeyBBbGxWaWV3U2VjdGlvbkxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vVmlld1NlY3Rpb24uanMnXG5cbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMuanMnXG5pbXBvcnQge1xuICAgIFZpZXdTZWN0aW9uIGFzIFZpZXdTZWN0aW9uTG9jYXRvcnMsXG4gICAgQ3VzdG9tVHJlZVNlY3Rpb24gYXMgQ3VzdG9tVHJlZVNlY3Rpb25Mb2NhdG9yc1xufSBmcm9tICcuLi8uLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tVHJlZVNlY3Rpb24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxBbGxWaWV3U2VjdGlvbkxvY2F0b3JzPiB7IH1cbi8qKlxuICogQ3VzdG9tIHRyZWUgdmlldywgZS5nLiBjb250cmlidXRlZCBieSBhbiBleHRlbnNpb25cbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcih7IC4uLlZpZXdTZWN0aW9uTG9jYXRvcnMsIC4uLkN1c3RvbVRyZWVTZWN0aW9uTG9jYXRvcnMgfSlcbmV4cG9ydCBjbGFzcyBDdXN0b21UcmVlU2VjdGlvbiBleHRlbmRzIFRyZWVTZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gWydWaWV3U2VjdGlvbicgYXMgY29uc3QsICdDdXN0b21UcmVlU2VjdGlvbicgYXMgY29uc3RdXG5cbiAgICBhc3luYyBnZXRWaXNpYmxlSXRlbXMgKCk6IFByb21pc2U8VHJlZUl0ZW1bXT4ge1xuICAgICAgICBjb25zdCBpdGVtczogVHJlZUl0ZW1bXSA9IFtdXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgdGhpcy5pdGVtUm93JCRcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgaXRlbXMucHVzaChhd2FpdCBuZXcgQ3VzdG9tVHJlZUl0ZW0odGhpcy5sb2NhdG9yTWFwLCBlbGVtZW50IGFzIGFueSwgdGhpcykud2FpdCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtc1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmRJdGVtIChsYWJlbDogc3RyaW5nLCBtYXhMZXZlbCA9IDApOiBQcm9taXNlPFRyZWVJdGVtIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhwYW5kKClcblxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBhd2FpdCB0aGlzLnJvd0NvbnRhaW5lciRcbiAgICAgICAgYXdhaXQgY29udGFpbmVyLndhaXRGb3JFeGlzdCh7IHRpbWVvdXQ6IDUwMDAgfSlcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpLmRvd24oS2V5LkhvbWUpLnVwKEtleS5Ib21lKS5wZXJmb3JtKClcbiAgICAgICAgbGV0IGl0ZW06IFRyZWVJdGVtIHwgdW5kZWZpbmVkXG5cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCBjb250YWluZXIuJCQodGhpcy5sb2NhdG9ycy5pdGVtUm93KVxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBlbGVtZW50LiQkKHRoaXMubG9jYXRvcnMucm93V2l0aExhYmVsKGxhYmVsKSlcbiAgICAgICAgICAgIGlmICh0ZW1wLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9ICthd2FpdCB0ZW1wWzBdLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JNYXAuVmlld1NlY3Rpb24ubGV2ZWwgYXMgc3RyaW5nKVxuICAgICAgICAgICAgICAgIGlmIChtYXhMZXZlbCA8IDEgfHwgbGV2ZWwgPD0gbWF4TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGF3YWl0IG5ldyBDdXN0b21UcmVlSXRlbSh0aGlzLmxvY2F0b3JNYXAsIGVsZW1lbnQgYXMgYW55LCB0aGlzKS53YWl0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICB9XG59XG4iXX0=