var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DefaultTreeItem_1;
import { TreeItem } from '../../ViewItem.js';
import { PageDecorator } from '../../../utils.js';
import { TreeItem as TreeItemLocators, DefaultTreeItem as DefaultTreeItemLocators } from '../../../../locators/1.73.0.js';
/**
 * Default tree item base on the items in explorer view
 *
 * @category Sidebar
 */
export let DefaultTreeItem = DefaultTreeItem_1 = class DefaultTreeItem extends TreeItem {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        this.viewPart = viewPart;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'DefaultTreeItem'];
    }
    getDescription() {
        return Promise.resolve(undefined);
    }
    async getLabel() {
        return this.elem.getAttribute(this.locatorMap.DefaultTreeSection.itemLabel);
    }
    async getTooltip() {
        return this.tooltip$.getAttribute('title');
    }
    async isExpanded() {
        const twistieClass = await this.twistie$.getAttribute('class');
        return twistieClass.indexOf('collapsed') < 0;
    }
    async getChildren() {
        const rows = await this.getChildItems(this.locatorMap.DefaultTreeSection.itemRow);
        const items = await Promise.all(rows.map(async (row) => (new DefaultTreeItem_1(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        row, this.viewPart).wait())));
        return items;
    }
    async isExpandable() {
        const twistieClass = await this.twistie$.getAttribute('class');
        return twistieClass.indexOf('collapsible') > -1;
    }
};
DefaultTreeItem = DefaultTreeItem_1 = __decorate([
    PageDecorator({ ...TreeItemLocators, ...DefaultTreeItemLocators })
], DefaultTreeItem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdFRyZWVJdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvdHJlZS9kZWZhdWx0L0RlZmF1bHRUcmVlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUU5RCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLG1CQUFtQixDQUFBO0FBQ25GLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGVBQWUsSUFBSSx1QkFBdUIsRUFDN0MsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksV0FBTSxlQUFlLHVCQUFyQixNQUFNLGVBQWdCLFNBQVEsUUFBUTtJQU16QyxZQUNJLFFBQTBCLEVBQzFCLE9BQXFELEVBQzlDLFFBQXFCO1FBRTVCLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUZoQyxhQUFRLEdBQVIsUUFBUSxDQUFhO1FBUmhDOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsVUFBbUIsRUFBRSxpQkFBMEIsQ0FBQyxDQUFBO0lBUXJFLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFtQixDQUFDLENBQUE7SUFDekYsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDWixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlELE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXO1FBQ2IsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsT0FBaUIsQ0FBQyxDQUFBO1FBQzNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUNwQixJQUFJLGlCQUFlLENBQ2YsSUFBSSxDQUFDLFVBQVU7UUFDZixpRUFBaUU7UUFDakUsR0FBVSxFQUNWLElBQUksQ0FBQyxRQUFRLENBQ2hCLENBQUMsSUFBSSxFQUFFLENBQ1gsQ0FBQyxDQUNMLENBQUE7UUFDRCxPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDZCxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlELE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0NBQ0osQ0FBQTtBQWxEWSxlQUFlO0lBRDNCLGFBQWEsQ0FBQyxFQUFFLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyx1QkFBdUIsRUFBRSxDQUFDO0dBQ3RELGVBQWUsQ0FrRDNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHsgVHJlZUl0ZW0sIFZpZXdJdGVtTG9jYXRvcnMgfSBmcm9tICcuLi8uLi9WaWV3SXRlbS5qcydcbmltcG9ydCB7IFRyZWVTZWN0aW9uIH0gZnJvbSAnLi4vVHJlZVNlY3Rpb24uanMnXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciwgVlNDb2RlTG9jYXRvck1hcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBUcmVlSXRlbSBhcyBUcmVlSXRlbUxvY2F0b3JzLFxuICAgIERlZmF1bHRUcmVlSXRlbSBhcyBEZWZhdWx0VHJlZUl0ZW1Mb2NhdG9yc1xufSBmcm9tICcuLi8uLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVmYXVsdFRyZWVJdGVtIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8Vmlld0l0ZW1Mb2NhdG9ycz4geyB9XG4vKipcbiAqIERlZmF1bHQgdHJlZSBpdGVtIGJhc2Ugb24gdGhlIGl0ZW1zIGluIGV4cGxvcmVyIHZpZXdcbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcih7IC4uLlRyZWVJdGVtTG9jYXRvcnMsIC4uLkRlZmF1bHRUcmVlSXRlbUxvY2F0b3JzIH0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRyZWVJdGVtIGV4dGVuZHMgVHJlZUl0ZW0ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSBbJ1RyZWVJdGVtJyBhcyBjb25zdCwgJ0RlZmF1bHRUcmVlSXRlbScgYXMgY29uc3RdXG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtZW50OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIHZpZXdQYXJ0OiBUcmVlU2VjdGlvblxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZWxlbWVudCwgdmlld1BhcnQuZWxlbSlcbiAgICB9XG5cbiAgICBnZXREZXNjcmlwdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKVxuICAgIH1cblxuICAgIGFzeW5jIGdldExhYmVsICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JNYXAuRGVmYXVsdFRyZWVTZWN0aW9uLml0ZW1MYWJlbCBhcyBzdHJpbmcpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VG9vbHRpcCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcCQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgfVxuXG4gICAgYXN5bmMgaXNFeHBhbmRlZCAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHR3aXN0aWVDbGFzcyA9IGF3YWl0IHRoaXMudHdpc3RpZSQuZ2V0QXR0cmlidXRlKCdjbGFzcycpXG4gICAgICAgIHJldHVybiB0d2lzdGllQ2xhc3MuaW5kZXhPZignY29sbGFwc2VkJykgPCAwXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2hpbGRyZW4gKCk6IFByb21pc2U8VHJlZUl0ZW1bXT4ge1xuICAgICAgICBjb25zdCByb3dzID0gYXdhaXQgdGhpcy5nZXRDaGlsZEl0ZW1zKHRoaXMubG9jYXRvck1hcC5EZWZhdWx0VHJlZVNlY3Rpb24uaXRlbVJvdyBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICByb3dzLm1hcChhc3luYyAocm93KSA9PiAoXG4gICAgICAgICAgICAgICAgbmV3IERlZmF1bHRUcmVlSXRlbShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICByb3cgYXMgYW55LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdQYXJ0XG4gICAgICAgICAgICAgICAgKS53YWl0KClcbiAgICAgICAgICAgICkpXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGl0ZW1zXG4gICAgfVxuXG4gICAgYXN5bmMgaXNFeHBhbmRhYmxlICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgdHdpc3RpZUNsYXNzID0gYXdhaXQgdGhpcy50d2lzdGllJC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcbiAgICAgICAgcmV0dXJuIHR3aXN0aWVDbGFzcy5pbmRleE9mKCdjb2xsYXBzaWJsZScpID4gLTFcbiAgICB9XG59XG4iXX0=