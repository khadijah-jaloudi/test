var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { TreeSection } from '../TreeSection.js';
import { DefaultTreeItem } from './DefaultTreeItem.js';
import { PageDecorator } from '../../../utils.js';
import { ViewSection as ViewSectionLocators, DefaultTreeSection as DefaultTreeSectionLocators } from '../../../../locators/1.73.0.js';
/**
 * Default view section
 *
 * @category Sidebar
 */
export let DefaultTreeSection = class DefaultTreeSection extends TreeSection {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = ['ViewSection', 'DefaultTreeSection'];
    }
    async getVisibleItems() {
        const items = [];
        const elements = await this.itemRow$$;
        for (const element of elements) {
            items.push(
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            await new DefaultTreeItem(this.locatorMap, element, this).wait());
        }
        return items;
    }
    async findItem(label, maxLevel = 0) {
        await this.expand();
        const container = await this.rowContainer$;
        await browser.action('key').down(Key.Home).up(Key.Home).perform();
        let item;
        do {
            const temp = await container.$$(this.locatorMap.DefaultTreeItem.ctor(label));
            if (temp.length > 0) {
                const level = +await temp[0].getAttribute(this.locators.level);
                if (maxLevel < 1 || level <= maxLevel) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    item = await new DefaultTreeItem(this.locatorMap, temp[0], this).wait();
                }
            }
            if (!item) {
                const lastrow = await container.$$(this.locators.lastRow);
                if (lastrow.length > 0) {
                    break;
                }
                await browser.action('key').down(Key.PageDown).up(Key.PageDown).perform();
            }
        } while (!item);
        return item;
    }
};
DefaultTreeSection = __decorate([
    PageDecorator({ ...ViewSectionLocators, ...DefaultTreeSectionLocators })
], DefaultTreeSection);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdFRyZWVTZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvdHJlZS9kZWZhdWx0L0RlZmF1bHRUcmVlU2VjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRWpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFdEQsT0FBTyxFQUFFLGFBQWEsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUNqRSxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxrQkFBa0IsSUFBSSwwQkFBMEIsRUFDbkQsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksV0FBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBbUIsU0FBUSxXQUFXO0lBQTVDOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsYUFBc0IsRUFBRSxvQkFBNkIsQ0FBQyxDQUFBO0lBdUMvRSxDQUFDO0lBckNHLEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQTtRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsS0FBSyxDQUFDLElBQUk7WUFDTixpRUFBaUU7WUFDakUsTUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDMUUsQ0FBQTtTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUUsS0FBYSxFQUFFLFFBQVEsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQTtRQUMxQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2pFLElBQUksSUFBMEIsQ0FBQTtRQUM5QixHQUFHO1lBQ0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQWlCLENBQUMsS0FBSyxDQUFXLENBQUMsQ0FBQTtZQUNwRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUM5RCxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLFFBQVEsRUFBRTtvQkFDbkMsaUVBQWlFO29CQUNqRSxJQUFJLEdBQUcsTUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtpQkFDakY7YUFDSjtZQUNELElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ3pELElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3BCLE1BQUs7aUJBQ1I7Z0JBQ0QsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTthQUM1RTtTQUNKLFFBQVEsQ0FBQyxJQUFJLEVBQUM7UUFFZixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7Q0FDSixDQUFBO0FBM0NZLGtCQUFrQjtJQUQ5QixhQUFhLENBQUMsRUFBRSxHQUFHLG1CQUFtQixFQUFFLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztHQUM1RCxrQkFBa0IsQ0EyQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2V5IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5cbmltcG9ydCB7IFRyZWVTZWN0aW9uIH0gZnJvbSAnLi4vVHJlZVNlY3Rpb24uanMnXG5pbXBvcnQgeyBUcmVlSXRlbSwgQWxsVmlld1NlY3Rpb25Mb2NhdG9ycyB9IGZyb20gJy4uLy4uLy4uL2luZGV4LmpzJ1xuaW1wb3J0IHsgRGVmYXVsdFRyZWVJdGVtIH0gZnJvbSAnLi9EZWZhdWx0VHJlZUl0ZW0uanMnXG5cbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMuanMnXG5pbXBvcnQge1xuICAgIFZpZXdTZWN0aW9uIGFzIFZpZXdTZWN0aW9uTG9jYXRvcnMsXG4gICAgRGVmYXVsdFRyZWVTZWN0aW9uIGFzIERlZmF1bHRUcmVlU2VjdGlvbkxvY2F0b3JzXG59IGZyb20gJy4uLy4uLy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0VHJlZVNlY3Rpb24gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxBbGxWaWV3U2VjdGlvbkxvY2F0b3JzPiB7IH1cbi8qKlxuICogRGVmYXVsdCB2aWV3IHNlY3Rpb25cbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcih7IC4uLlZpZXdTZWN0aW9uTG9jYXRvcnMsIC4uLkRlZmF1bHRUcmVlU2VjdGlvbkxvY2F0b3JzIH0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRyZWVTZWN0aW9uIGV4dGVuZHMgVHJlZVNlY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSBbJ1ZpZXdTZWN0aW9uJyBhcyBjb25zdCwgJ0RlZmF1bHRUcmVlU2VjdGlvbicgYXMgY29uc3RdXG5cbiAgICBhc3luYyBnZXRWaXNpYmxlSXRlbXMgKCk6IFByb21pc2U8VHJlZUl0ZW1bXT4ge1xuICAgICAgICBjb25zdCBpdGVtczogVHJlZUl0ZW1bXSA9IFtdXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgdGhpcy5pdGVtUm93JCRcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IERlZmF1bHRUcmVlSXRlbSh0aGlzLmxvY2F0b3JNYXAsIGVsZW1lbnQgYXMgYW55LCB0aGlzKS53YWl0KClcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXNcbiAgICB9XG5cbiAgICBhc3luYyBmaW5kSXRlbSAobGFiZWw6IHN0cmluZywgbWF4TGV2ZWwgPSAwKTogUHJvbWlzZTxUcmVlSXRlbSB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4cGFuZCgpXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGF3YWl0IHRoaXMucm93Q29udGFpbmVyJFxuICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JykuZG93bihLZXkuSG9tZSkudXAoS2V5LkhvbWUpLnBlcmZvcm0oKVxuICAgICAgICBsZXQgaXRlbTogVHJlZUl0ZW0gfCB1bmRlZmluZWRcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGNvbnRhaW5lci4kJCgodGhpcy5sb2NhdG9yTWFwLkRlZmF1bHRUcmVlSXRlbS5jdG9yIGFzIEZ1bmN0aW9uKShsYWJlbCkgYXMgc3RyaW5nKVxuICAgICAgICAgICAgaWYgKHRlbXAubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gK2F3YWl0IHRlbXBbMF0uZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMubGV2ZWwpXG4gICAgICAgICAgICAgICAgaWYgKG1heExldmVsIDwgMSB8fCBsZXZlbCA8PSBtYXhMZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gYXdhaXQgbmV3IERlZmF1bHRUcmVlSXRlbSh0aGlzLmxvY2F0b3JNYXAsIHRlbXBbMF0gYXMgYW55LCB0aGlzKS53YWl0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0cm93ID0gYXdhaXQgY29udGFpbmVyLiQkKHRoaXMubG9jYXRvcnMubGFzdFJvdylcbiAgICAgICAgICAgICAgICBpZiAobGFzdHJvdy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIuYWN0aW9uKCdrZXknKS5kb3duKEtleS5QYWdlRG93bikudXAoS2V5LlBhZ2VEb3duKS5wZXJmb3JtKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoIWl0ZW0pXG5cbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICB9XG59XG4iXX0=