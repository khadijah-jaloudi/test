var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ElementWithContextMenu, PageDecorator, BasePage } from '../utils.js';
import { SideBarView } from '../index.js';
import { ViewTitlePart as ViewTitlePartLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the top (title) part of a side bar view
 *
 * @category Sidebar
 */
export let ViewTitlePart = class ViewTitlePart extends ElementWithContextMenu {
    constructor(locators, view = new SideBarView(locators)) {
        super(locators);
        this.view = view;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
    }
    /**
     * Returns the displayed title of the view
     * @returns Promise resolving to displayed title
     */
    async getTitle() {
        return this.title$.getText();
    }
    /**
     * Finds action buttons inside the view title part
     * @returns Promise resolving to array of TitleActionButton objects
     */
    async getActions() {
        const actions = [];
        const elements = await this.action$$;
        for (const element of elements) {
            const title = await element.getAttribute(this.locators.actionLabel);
            const link = element.$(this.locators.actionContstructor(title));
            actions.push(await new TitleActionButton(this.locatorMap, link, title, this).wait());
        }
        return actions;
    }
    /**
     * Finds an action button by title
     * @param title title of the button to search for
     * @returns Promise resolving to TitleActionButton object
     */
    async getAction(title) {
        const link = this.elem.$(this.locators.actionContstructor(title));
        return new TitleActionButton(this.locatorMap, link, title, this).wait();
    }
};
ViewTitlePart = __decorate([
    PageDecorator(ViewTitlePartLocators)
], ViewTitlePart);
/**
 * Page object representing a button inside the view title part
 *
 * @category Sidebar
 */
export let TitleActionButton = class TitleActionButton extends BasePage {
    constructor(locators, elem, title, viewTitle) {
        super(locators, elem, viewTitle.elem);
        this.title = title;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
        this.title = title;
    }
    /**
     * Get title of the button
     */
    getTitle() {
        return this.title;
    }
};
TitleActionButton = __decorate([
    PageDecorator(ViewTitlePartLocators)
], TitleActionButton);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld1RpdGxlUGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9zaWRlYmFyL1ZpZXdUaXRsZVBhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUNILHNCQUFzQixFQUFFLGFBQWEsRUFBa0IsUUFBUSxFQUNsRSxNQUFNLGFBQWEsQ0FBQTtBQUNwQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLElBQUkscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdqRjs7OztHQUlHO0FBRUksV0FBTSxhQUFhLEdBQW5CLE1BQU0sYUFBYyxTQUFRLHNCQUFvRDtJQU1uRixZQUNJLFFBQTBCLEVBQ25CLE9BQXlCLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUV6RCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFGUixTQUFJLEdBQUosSUFBSSxDQUE4QztRQVA3RDs7V0FFRztRQUNJLGVBQVUsR0FBRyxlQUF3QixDQUFBO0lBTzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDWixNQUFNLE9BQU8sR0FBd0IsRUFBRSxDQUFBO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUNwQyxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUM1QixNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUNuRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUMvRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtTQUN2RjtRQUNELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBRSxLQUFhO1FBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUNqRSxPQUFPLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQzNFLENBQUM7Q0FDSixDQUFBO0FBN0NZLGFBQWE7SUFEekIsYUFBYSxDQUFDLHFCQUFxQixDQUFDO0dBQ3hCLGFBQWEsQ0E2Q3pCO0FBR0Q7Ozs7R0FJRztBQUVJLFdBQU0saUJBQWlCLEdBQXZCLE1BQU0saUJBQWtCLFNBQVEsUUFBc0M7SUFNekUsWUFDSSxRQUEwQixFQUMxQixJQUFrRCxFQUMxQyxLQUFhLEVBQ3JCLFNBQXdCO1FBRXhCLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUg3QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBUnpCOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGVBQXdCLENBQUE7UUFTeEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNyQixDQUFDO0NBQ0osQ0FBQTtBQXRCWSxpQkFBaUI7SUFEN0IsYUFBYSxDQUFDLHFCQUFxQixDQUFDO0dBQ3hCLGlCQUFpQixDQXNCN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENoYWluYWJsZVByb21pc2VFbGVtZW50IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5pbXBvcnQge1xuICAgIEVsZW1lbnRXaXRoQ29udGV4dE1lbnUsIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBCYXNlUGFnZSwgVlNDb2RlTG9jYXRvck1hcFxufSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IFNpZGVCYXJWaWV3IH0gZnJvbSAnLi4vaW5kZXguanMnXG5pbXBvcnQgeyBWaWV3VGl0bGVQYXJ0IGFzIFZpZXdUaXRsZVBhcnRMb2NhdG9ycyB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBWaWV3VGl0bGVQYXJ0IGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIFZpZXdUaXRsZVBhcnRMb2NhdG9ycz4geyB9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdG9wICh0aXRsZSkgcGFydCBvZiBhIHNpZGUgYmFyIHZpZXdcbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcihWaWV3VGl0bGVQYXJ0TG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgVmlld1RpdGxlUGFydCBleHRlbmRzIEVsZW1lbnRXaXRoQ29udGV4dE1lbnU8dHlwZW9mIFZpZXdUaXRsZVBhcnRMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnVmlld1RpdGxlUGFydCcgYXMgY29uc3RcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIHB1YmxpYyB2aWV3OiBTaWRlQmFyVmlldzxhbnk+ID0gbmV3IFNpZGVCYXJWaWV3KGxvY2F0b3JzKVxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXNwbGF5ZWQgdGl0bGUgb2YgdGhlIHZpZXdcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBkaXNwbGF5ZWQgdGl0bGVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRUaXRsZSAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGl0bGUkLmdldFRleHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFjdGlvbiBidXR0b25zIGluc2lkZSB0aGUgdmlldyB0aXRsZSBwYXJ0XG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gYXJyYXkgb2YgVGl0bGVBY3Rpb25CdXR0b24gb2JqZWN0c1xuICAgICAqL1xuICAgIGFzeW5jIGdldEFjdGlvbnMgKCk6IFByb21pc2U8VGl0bGVBY3Rpb25CdXR0b25bXT4ge1xuICAgICAgICBjb25zdCBhY3Rpb25zOiBUaXRsZUFjdGlvbkJ1dHRvbltdID0gW11cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLmFjdGlvbiQkXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBhd2FpdCBlbGVtZW50LmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmFjdGlvbkxhYmVsKVxuICAgICAgICAgICAgY29uc3QgbGluayA9IGVsZW1lbnQuJCh0aGlzLmxvY2F0b3JzLmFjdGlvbkNvbnRzdHJ1Y3Rvcih0aXRsZSkpXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYXdhaXQgbmV3IFRpdGxlQWN0aW9uQnV0dG9uKHRoaXMubG9jYXRvck1hcCwgbGluaywgdGl0bGUsIHRoaXMpLndhaXQoKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9uc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFuIGFjdGlvbiBidXR0b24gYnkgdGl0bGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgdGl0bGUgb2YgdGhlIGJ1dHRvbiB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gVGl0bGVBY3Rpb25CdXR0b24gb2JqZWN0XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWN0aW9uICh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxUaXRsZUFjdGlvbkJ1dHRvbj4ge1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5lbGVtLiQodGhpcy5sb2NhdG9ycy5hY3Rpb25Db250c3RydWN0b3IodGl0bGUpKVxuICAgICAgICByZXR1cm4gbmV3IFRpdGxlQWN0aW9uQnV0dG9uKHRoaXMubG9jYXRvck1hcCwgbGluaywgdGl0bGUsIHRoaXMpLndhaXQoKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3VGl0bGVQYXJ0IGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIFZpZXdUaXRsZVBhcnRMb2NhdG9ycz4geyB9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyBhIGJ1dHRvbiBpbnNpZGUgdGhlIHZpZXcgdGl0bGUgcGFydFxuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFZpZXdUaXRsZVBhcnRMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBUaXRsZUFjdGlvbkJ1dHRvbiBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBWaWV3VGl0bGVQYXJ0TG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ1ZpZXdUaXRsZVBhcnQnIGFzIGNvbnN0XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBlbGVtOiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nLFxuICAgICAgICB2aWV3VGl0bGU6IFZpZXdUaXRsZVBhcnRcbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIGVsZW0sIHZpZXdUaXRsZS5lbGVtKVxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGl0bGUgb2YgdGhlIGJ1dHRvblxuICAgICAqL1xuICAgIGdldFRpdGxlICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZVxuICAgIH1cbn1cbiJdfQ==