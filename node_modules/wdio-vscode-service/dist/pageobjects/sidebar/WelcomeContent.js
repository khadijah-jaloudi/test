var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { WelcomeContent as WelcomeContentLocators } from '../../locators/1.73.0.js';
/**
 * A button that appears in the welcome content and can be clicked to execute a command.
 *
 * To execute the command bound to this button simply run: `await button.click();`.
 *
 * @category Sidebar
 */
export let WelcomeContentButton = class WelcomeContentButton extends BasePage {
    /**
     * @param panel  The panel containing the button in the welcome section
     * @param welcomeSection  The enclosing welcome section
     */
    constructor(locators, panel, welcomeSection) {
        super(locators, panel);
        this.welcomeSection = welcomeSection;
        /**
         * @private
         */
        this.locatorKey = 'WelcomeContent';
    }
    /** Return the title displayed on this button */
    getTitle() {
        return this.elem.getText();
    }
};
WelcomeContentButton = __decorate([
    PageDecorator(WelcomeContentLocators)
], WelcomeContentButton);
/**
 * A section in an empty custom view, see:
 * https://code.visualstudio.com/api/extension-guides/tree-view#welcome-content
 *
 * The welcome section contains two types of elements: text entries and buttons that can be bound to commands.
 * The text sections can be accessed via [[getTextSections]], the buttons on the
 * other hand via [[getButtons]].
 * This however looses the information of the order of the buttons and lines
 * with respect to each other. This can be remedied by using [[getContents]],
 * which returns both in the order that they are found (at the expense, that you
 * now must use typechecks to find out what you got).
 *
 * @category Sidebar
 */
export let WelcomeContentSection = class WelcomeContentSection extends BasePage {
    /**
     * @param panel  The panel containing the welcome content.
     * @param parent  The webelement in which the welcome content is embedded.
     */
    constructor(locators, panel, parent) {
        super(locators, panel, parent.elem);
        /**
         * @private
         */
        this.locatorKey = 'WelcomeContent';
    }
    /**
     * Combination of [[getButtons]] and [[getTextSections]]: returns all entries in the welcome
     * view in the order that they appear.
     */
    async getContents() {
        const elements = await this.buttonOrText$$;
        return Promise.all(elements.map(async (e) => {
            const tagName = await e.getTagName();
            if (tagName === 'p') {
                return e.getText();
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            return new WelcomeContentButton(this.locatorMap, e, this);
        }));
    }
    /** Finds all buttons in the welcome content */
    getButtons() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return this.button$$.map((elem) => new WelcomeContentButton(this.locatorMap, elem, this));
    }
    /**
     * Finds all text entries in the welcome content and returns each line as an
     * element in an array.
     */
    getTextSections() {
        return this.text$$.map((elem) => elem.getText());
    }
};
WelcomeContentSection = __decorate([
    PageDecorator(WelcomeContentLocators)
], WelcomeContentSection);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2VsY29tZUNvbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci9XZWxjb21lQ29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxPQUFPLEVBQ0gsUUFBUSxFQUFFLGFBQWEsRUFDMUIsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUFFLGNBQWMsSUFBSSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBR25GOzs7Ozs7R0FNRztBQUVJLFdBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQXFCLFNBQVEsUUFBdUM7SUFNN0U7OztPQUdHO0lBQ0gsWUFDSSxRQUEwQixFQUMxQixLQUFtRCxFQUM1QyxjQUFxQztRQUU1QyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRmYsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBWmhEOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGdCQUF5QixDQUFBO0lBWTdDLENBQUM7SUFFRCxnREFBZ0Q7SUFDekMsUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0NBQ0osQ0FBQTtBQXRCWSxvQkFBb0I7SUFEaEMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO0dBQ3pCLG9CQUFvQixDQXNCaEM7QUFHRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUksV0FBTSxxQkFBcUIsR0FBM0IsTUFBTSxxQkFBc0IsU0FBUSxRQUF1QztJQU05RTs7O09BR0c7SUFDSCxZQUNJLFFBQTBCLEVBQzFCLEtBQW1ELEVBQ25ELE1BQW1CO1FBRW5CLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQWR2Qzs7V0FFRztRQUNJLGVBQVUsR0FBRyxnQkFBeUIsQ0FBQTtJQVk3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLFdBQVc7UUFDcEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFBO1FBQzFDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUNwQyxJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQUU7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO2FBQ3JCO1lBRUQsaUVBQWlFO1lBQ2pFLE9BQU8sSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsQ0FBQztJQUVELCtDQUErQztJQUN4QyxVQUFVO1FBQ2IsaUVBQWlFO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUNwRyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0NBQ0osQ0FBQTtBQWhEWSxxQkFBcUI7SUFEakMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO0dBQ3pCLHFCQUFxQixDQWdEakMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBWaWV3U2VjdGlvbiB9IGZyb20gJy4uL2luZGV4LmpzJ1xuaW1wb3J0IHtcbiAgICBCYXNlUGFnZSwgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIFZTQ29kZUxvY2F0b3JNYXBcbn0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBXZWxjb21lQ29udGVudCBhcyBXZWxjb21lQ29udGVudExvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFdlbGNvbWVDb250ZW50QnV0dG9uIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIFdlbGNvbWVDb250ZW50TG9jYXRvcnM+IHt9XG4vKipcbiAqIEEgYnV0dG9uIHRoYXQgYXBwZWFycyBpbiB0aGUgd2VsY29tZSBjb250ZW50IGFuZCBjYW4gYmUgY2xpY2tlZCB0byBleGVjdXRlIGEgY29tbWFuZC5cbiAqXG4gKiBUbyBleGVjdXRlIHRoZSBjb21tYW5kIGJvdW5kIHRvIHRoaXMgYnV0dG9uIHNpbXBseSBydW46IGBhd2FpdCBidXR0b24uY2xpY2soKTtgLlxuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFdlbGNvbWVDb250ZW50TG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgV2VsY29tZUNvbnRlbnRCdXR0b24gZXh0ZW5kcyBCYXNlUGFnZTx0eXBlb2YgV2VsY29tZUNvbnRlbnRMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnV2VsY29tZUNvbnRlbnQnIGFzIGNvbnN0XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcGFuZWwgIFRoZSBwYW5lbCBjb250YWluaW5nIHRoZSBidXR0b24gaW4gdGhlIHdlbGNvbWUgc2VjdGlvblxuICAgICAqIEBwYXJhbSB3ZWxjb21lU2VjdGlvbiAgVGhlIGVuY2xvc2luZyB3ZWxjb21lIHNlY3Rpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBwYW5lbDogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4sXG4gICAgICAgIHB1YmxpYyB3ZWxjb21lU2VjdGlvbjogV2VsY29tZUNvbnRlbnRTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBwYW5lbClcbiAgICB9XG5cbiAgICAvKiogUmV0dXJuIHRoZSB0aXRsZSBkaXNwbGF5ZWQgb24gdGhpcyBidXR0b24gKi9cbiAgICBwdWJsaWMgZ2V0VGl0bGUgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0VGV4dCgpXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlbGNvbWVDb250ZW50U2VjdGlvbiBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBXZWxjb21lQ29udGVudExvY2F0b3JzPiB7fVxuLyoqXG4gKiBBIHNlY3Rpb24gaW4gYW4gZW1wdHkgY3VzdG9tIHZpZXcsIHNlZTpcbiAqIGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2FwaS9leHRlbnNpb24tZ3VpZGVzL3RyZWUtdmlldyN3ZWxjb21lLWNvbnRlbnRcbiAqXG4gKiBUaGUgd2VsY29tZSBzZWN0aW9uIGNvbnRhaW5zIHR3byB0eXBlcyBvZiBlbGVtZW50czogdGV4dCBlbnRyaWVzIGFuZCBidXR0b25zIHRoYXQgY2FuIGJlIGJvdW5kIHRvIGNvbW1hbmRzLlxuICogVGhlIHRleHQgc2VjdGlvbnMgY2FuIGJlIGFjY2Vzc2VkIHZpYSBbW2dldFRleHRTZWN0aW9uc11dLCB0aGUgYnV0dG9ucyBvbiB0aGVcbiAqIG90aGVyIGhhbmQgdmlhIFtbZ2V0QnV0dG9uc11dLlxuICogVGhpcyBob3dldmVyIGxvb3NlcyB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIG9yZGVyIG9mIHRoZSBidXR0b25zIGFuZCBsaW5lc1xuICogd2l0aCByZXNwZWN0IHRvIGVhY2ggb3RoZXIuIFRoaXMgY2FuIGJlIHJlbWVkaWVkIGJ5IHVzaW5nIFtbZ2V0Q29udGVudHNdXSxcbiAqIHdoaWNoIHJldHVybnMgYm90aCBpbiB0aGUgb3JkZXIgdGhhdCB0aGV5IGFyZSBmb3VuZCAoYXQgdGhlIGV4cGVuc2UsIHRoYXQgeW91XG4gKiBub3cgbXVzdCB1c2UgdHlwZWNoZWNrcyB0byBmaW5kIG91dCB3aGF0IHlvdSBnb3QpLlxuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFdlbGNvbWVDb250ZW50TG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgV2VsY29tZUNvbnRlbnRTZWN0aW9uIGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIFdlbGNvbWVDb250ZW50TG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ1dlbGNvbWVDb250ZW50JyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHBhbmVsICBUaGUgcGFuZWwgY29udGFpbmluZyB0aGUgd2VsY29tZSBjb250ZW50LlxuICAgICAqIEBwYXJhbSBwYXJlbnQgIFRoZSB3ZWJlbGVtZW50IGluIHdoaWNoIHRoZSB3ZWxjb21lIGNvbnRlbnQgaXMgZW1iZWRkZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgcGFuZWw6IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+LFxuICAgICAgICBwYXJlbnQ6IFZpZXdTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBwYW5lbCwgcGFyZW50LmVsZW0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tYmluYXRpb24gb2YgW1tnZXRCdXR0b25zXV0gYW5kIFtbZ2V0VGV4dFNlY3Rpb25zXV06IHJldHVybnMgYWxsIGVudHJpZXMgaW4gdGhlIHdlbGNvbWVcbiAgICAgKiB2aWV3IGluIHRoZSBvcmRlciB0aGF0IHRoZXkgYXBwZWFyLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRDb250ZW50cyAoKTogUHJvbWlzZTwoV2VsY29tZUNvbnRlbnRCdXR0b24gfCBzdHJpbmcpW10+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLmJ1dHRvbk9yVGV4dCQkXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50cy5tYXAoYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSBhd2FpdCBlLmdldFRhZ05hbWUoKVxuICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmdldFRleHQoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWxjb21lQ29udGVudEJ1dHRvbih0aGlzLmxvY2F0b3JNYXAsIGUgYXMgYW55LCB0aGlzKVxuICAgICAgICB9KSlcbiAgICB9XG5cbiAgICAvKiogRmluZHMgYWxsIGJ1dHRvbnMgaW4gdGhlIHdlbGNvbWUgY29udGVudCAqL1xuICAgIHB1YmxpYyBnZXRCdXR0b25zICgpOiBQcm9taXNlPFdlbGNvbWVDb250ZW50QnV0dG9uW10+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uJCQubWFwKChlbGVtKSA9PiBuZXcgV2VsY29tZUNvbnRlbnRCdXR0b24odGhpcy5sb2NhdG9yTWFwLCBlbGVtIGFzIGFueSwgdGhpcykpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgYWxsIHRleHQgZW50cmllcyBpbiB0aGUgd2VsY29tZSBjb250ZW50IGFuZCByZXR1cm5zIGVhY2ggbGluZSBhcyBhblxuICAgICAqIGVsZW1lbnQgaW4gYW4gYXJyYXkuXG4gICAgICovXG4gICAgcHVibGljIGdldFRleHRTZWN0aW9ucyAoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0JCQubWFwKChlbGVtKSA9PiBlbGVtLmdldFRleHQoKSlcbiAgICB9XG59XG4iXX0=